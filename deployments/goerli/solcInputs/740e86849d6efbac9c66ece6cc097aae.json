{
  "language": "Solidity",
  "sources": {
    "contracts/abstracts/Admin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport { IERC721Drop } from \"@crea8ors/interfaces/IERC721Drop.sol\";\nimport { IAccessControl } from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport { Base } from \"./Base.sol\";\n\n/// @title Admin\n/// @notice An abstract contract with access control functionality.\nabstract contract Admin is Base {\n    /// @notice Access control roles\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER\");\n\n    /// @notice Modifier to allow only users with admin access\n    /// @param target The address of the contract implementing the access control\n    modifier onlyAdmin(address target) {\n        if (!isAdmin(target, msg.sender)) {\n            revert IERC721Drop.Access_OnlyAdmin();\n        }\n\n        _;\n    }\n\n    /// @notice Modifier to allow only a given role or admin access\n    /// @param target The address of the contract implementing the access control\n    /// @param role The role to check for alongside the admin role\n    modifier onlyRoleOrAdmin(address target, bytes32 role) {\n        if (!isAdmin(target, msg.sender) && !IAccessControl(target).hasRole(role, msg.sender)) {\n            revert IERC721Drop.Access_MissingRoleOrAdmin(role);\n        }\n\n        _;\n    }\n\n    /// @notice Getter for admin role associated with the contract to handle minting\n    /// @param target The address of the contract implementing the access control\n    /// @param user The address to check for admin access\n    /// @return Whether the address has admin access or not\n    function isAdmin(address target, address user) public view returns (bool) {\n        return IERC721Drop(target).isAdmin(user);\n    }\n}\n"
    },
    "contracts/abstracts/Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/// @title Base\n/// @notice A base abstract contract implementing common functionality for other contracts.\nabstract contract Base {\n    /// @notice given address is invalid.\n    error AddressCannotBeZero();\n\n    /// @dev Modifier to check if the provided address is not the zero address.\n    /// @param addr The address to be checked.\n    modifier notZeroAddress(address addr) {\n        if (addr == address(0)) {\n            revert AddressCannotBeZero();\n        }\n\n        _;\n    }\n}\n"
    },
    "contracts/abstracts/ERC5643.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport { IERC721 } from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport { IERC5643 } from \"../interfaces/IERC5643.sol\";\nimport { PaymentSystem } from \"../abstracts/PaymentSystem.sol\";\nimport { IERC721Drop } from \"@crea8ors/interfaces/IERC721Drop.sol\";\n\n/// @title ERC5643\n/// @notice An abstract contract implementing the IERC5643 interface for managing subscriptions to ERC721 tokens.\nabstract contract ERC5643 is IERC5643, PaymentSystem {\n    /*//////////////////////////////////////////////////////////////\n                             PRIVATE STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Mapping to store the expiration timestamps for each tokenId representing an active subscription.\n    mapping(uint256 tokenId => uint64 expiresAt) private _expirations;\n\n    /*//////////////////////////////////////////////////////////////\n                             PUBLIC STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The minimum duration allowed for subscription renewal.\n    uint64 public minRenewalDuration;\n\n    /// @notice The maximum duration allowed for subscription renewal. A value of 0 means lifetime extension is allowed.\n    uint64 public maxRenewalDuration; // 0 value means lifetime extension\n\n    ///@notice The address of the collection contract that mints and manages the tokens.\n    address public cre8orsNFT;\n\n    /*//////////////////////////////////////////////////////////////\n                                MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Modifier to check if `spender` is the owner or approved for the `tokenId`.\n    modifier onlyApprovedOrOwner(address spender, uint256 tokenId) {\n        if (!_isApprovedOrOwner(spender, tokenId)) {\n            revert IERC721Drop.Access_MissingOwnerOrApproved();\n        }\n\n        _;\n    }\n\n    /// @dev Modifier to check if the `duration` is between `minRenewalDuration` and `maxRenewalDuration`.\n    modifier isDurationBetweenMinAndMax(uint64 duration) {\n        if (duration < minRenewalDuration) {\n            revert RenewalTooShort();\n        } else if (maxRenewalDuration != 0 && duration > maxRenewalDuration) {\n            revert RenewalTooLong();\n        }\n\n        _;\n    }\n\n    /// @dev Modifier to check if the payment for `duration` is valid.\n    modifier isRenewalPriceValid(uint256 value, uint64 duration) {\n        if (duration == 0) {\n            revert DurationForRenewalPriceCannotBeZero();\n        }\n\n        if (value < _getRenewalPrice(duration)) {\n            revert InsufficientPayment();\n        }\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Checks zero address validation\n    /// @param cre8orsNFT_ The address of the cre8orsNFT contract.\n    /// @param minRenewalDuration_ The minimum duration allowed for subscription renewal, can be zero.\n    /// @param pricePerSecond_ The price per second for the subscription, can be zero.\n    constructor(\n        address cre8orsNFT_,\n        uint64 minRenewalDuration_,\n        uint256 pricePerSecond_\n    )\n        notZeroAddress(cre8orsNFT_)\n        PaymentSystem(pricePerSecond_)\n    {\n        cre8orsNFT = cre8orsNFT_;\n        minRenewalDuration = minRenewalDuration_;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                     USER-FACING CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IERC5643\n    function isRenewable(uint256 /*tokenId*/ ) external view virtual override returns (bool) {\n        return _isRenewable();\n    }\n\n    /// @inheritdoc IERC5643\n    function expiresAt(uint256 tokenId) public view virtual override returns (uint64) {\n        return _expirations[tokenId];\n    }\n\n    /// @dev See {IERC165-supportsInterface}.\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC5643).interfaceId || IERC721(cre8orsNFT).supportsInterface(interfaceId);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                   USER-FACING NON-CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IERC5643\n    function renewSubscription(\n        uint256 tokenId,\n        uint64 duration\n    )\n        external\n        payable\n        virtual\n        override\n        onlyApprovedOrOwner(msg.sender, tokenId)\n        isDurationBetweenMinAndMax(duration)\n        isRenewalPriceValid(msg.value, duration)\n    {\n        // extend subscription\n        _updateSubscriptionExpiration(tokenId, duration);\n    }\n\n    /// @inheritdoc IERC5643\n    function cancelSubscription(uint256 tokenId)\n        external\n        payable\n        virtual\n        override\n        onlyApprovedOrOwner(msg.sender, tokenId)\n    {\n        delete _expirations[tokenId];\n\n        emit SubscriptionUpdate(tokenId, 0);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    ONLY-ADMIN NON-CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Set the address of the cre8ors contract.\n    /// @dev This function can only be called by the contract admin.\n    /// @param target The address of the new cre8ors contract.\n    function setCre8orsNFT(address target) external onlyAdmin(target) {\n        cre8orsNFT = target;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                       INTERNAL CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Checks whether the subscription is renewable.\n    /// @dev This Internal function should be implemented in derived contracts to determine if renewability should be\n    /// disabled for all or some tokens.\n    /// @return A boolean value indicating whether the subscription can be renewed (true) or not (false).\n    function _isRenewable() internal view virtual returns (bool);\n\n    /// @notice Gets the price to renew a subscription for a specified `duration` in seconds.\n    /// @dev This Internal function should be implemented in derived contracts to calculate the renewal price for the\n    /// subscription.\n    /// @param duration The duration (in seconds) for which the subscription is to be extended.\n    /// @return The price (in native currency) required to renew the subscription for the given duration.\n    function _getRenewalPrice(uint64 duration) internal view virtual returns (uint256);\n\n    /*//////////////////////////////////////////////////////////////\n                     INTERNAL NON-CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Updates the expiration timestamp for a subscription represented by the given `tokenId`.\n    /// @dev this function won't check that the tokenId is valid, responsibility is delegated to the caller.\n    /// @param tokenId The unique identifier of the subscription token.\n    /// @param duration The duration (in seconds) to extend the subscription from the current timestamp.\n    function _updateSubscriptionExpiration(uint256 tokenId, uint64 duration) internal virtual {\n        uint64 currentExpiration = _expirations[tokenId];\n        uint64 newExpiration;\n\n        // Check if the current subscription is new or has expired\n        if ((currentExpiration == 0) || (currentExpiration < block.timestamp)) {\n            newExpiration = uint64(block.timestamp) + duration;\n        } else {\n            // If current subscription not expired (extend)\n            if (!_isRenewable()) {\n                revert SubscriptionNotRenewable();\n            }\n            newExpiration = currentExpiration + duration;\n        }\n\n        _expirations[tokenId] = newExpiration;\n\n        emit SubscriptionUpdate(tokenId, newExpiration);\n    }\n\n    /// @dev Internal function to set the minimum renewal duration.\n    /// @param duration The new minimum renewal duration (in seconds).\n    function _setMinimumRenewalDuration(uint64 duration) internal virtual {\n        minRenewalDuration = duration;\n    }\n\n    /// @dev Internal function to set the maximum renewal duration.\n    /// @param duration The new maximum renewal duration (in seconds).\n    function _setMaximumRenewalDuration(uint64 duration) internal virtual {\n        maxRenewalDuration = duration;\n    }\n\n    /// @notice Requires that spender owns or is approved for the token.\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address cre8orsNFT_ = cre8orsNFT;\n        address owner = IERC721(cre8orsNFT_).ownerOf(tokenId);\n        return (\n            spender == owner || IERC721(cre8orsNFT_).isApprovedForAll(owner, spender)\n                || IERC721(cre8orsNFT_).getApproved(tokenId) == spender\n        );\n    }\n}\n"
    },
    "contracts/abstracts/PaymentSystem.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport { IPaymentSystem } from \"../interfaces/IPaymentSystem.sol\";\nimport { Admin } from \"./Admin.sol\";\n\nabstract contract PaymentSystem is IPaymentSystem, Admin {\n    /*//////////////////////////////////////////////////////////////\n                             PUBLIC STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The price per second for the subscription in native currency.\n    uint256 public pricePerSecond;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    /// @param pricePerSecond_ The price per second for the subscription, can be zero.\n    constructor(uint256 pricePerSecond_) {\n        pricePerSecond = pricePerSecond_;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    ONLY-ADMIN NON-CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IPaymentSystem\n    function setPricePerSecond(address target, uint256 newPrice) external override onlyAdmin(target) {\n        pricePerSecond = newPrice;\n        emit PricePerSecondUpdated(newPrice);\n    }\n\n    /// @inheritdoc IPaymentSystem\n    function withdraw(address target, address payable to) external override onlyAdmin(target) notZeroAddress(to) {\n        uint256 amount = address(this).balance;\n        if (amount == 0) revert ValueCannotBeZero();\n\n        (bool success,) = to.call{ value: amount }(\"\");\n        if (!success) revert ETHTransferFailed();\n    }\n}\n"
    },
    "contracts/interfaces/IERC5643.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/// @title IERC5643\n/// @notice https://eips.ethereum.org/EIPS/eip-5643\n/// @dev type(IERC5643).interfaceId should return 0x8c65f84d\ninterface IERC5643 {\n    /*//////////////////////////////////////////////////////////////\n                             ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The duration provided for renewal is too short to extend the subscription.\n    error RenewalTooShort();\n\n    /// @notice The duration provided for renewal exceeds the allowed maximum for subscription extension.\n    error RenewalTooLong();\n\n    /// @notice The payment received for the subscription renewal is insufficient.\n    error InsufficientPayment();\n\n    /// @notice The subscription associated with the token is not renewable and cannot be extended.\n    error SubscriptionNotRenewable();\n\n    /// @notice The duration provided for renewal price calculation cannot be zero.\n    error DurationForRenewalPriceCannotBeZero();\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Emitted when a subscription expiration changes\n    /// @dev When a subscription is canceled, the expiration value should also be 0.\n    event SubscriptionUpdate(uint256 indexed tokenId, uint64 expiration);\n\n    /*//////////////////////////////////////////////////////////////\n                           CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Gets the expiration date of a subscription\n    /// @dev Throws if `tokenId` is not a valid NFT\n    /// @param tokenId The NFT to get the expiration date of\n    /// @return The expiration date of the subscription\n    function expiresAt(uint256 tokenId) external view returns (uint64);\n\n    /// @notice Determines whether a subscription can be renewed\n    /// @dev Throws if `tokenId` is not a valid NFT\n    /// @param tokenId The NFT to get the expiration date of\n    /// @return The renewability of a the subscription\n    function isRenewable(uint256 tokenId) external view returns (bool);\n\n    /*//////////////////////////////////////////////////////////////\n                         NON-CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Renews the subscription to an NFT\n    /// Throws if `tokenId` is not a valid NFT\n    /// @param tokenId The NFT to renew the subscription for\n    /// @param duration The number of seconds to extend a subscription for\n    function renewSubscription(uint256 tokenId, uint64 duration) external payable;\n\n    /// @notice Cancels the subscription of an NFT\n    /// @dev Throws if `tokenId` is not a valid NFT\n    /// @param tokenId The NFT to cancel the subscription for\n    function cancelSubscription(uint256 tokenId) external payable;\n}\n"
    },
    "contracts/interfaces/IPaymentSystem.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/// @title Payment System Interface\n/// @notice An interface for the PaymentSystem contract.\ninterface IPaymentSystem {\n    /// @notice Error message for zero value.\n    error ValueCannotBeZero();\n\n    /// @notice Error message for failed ETH transfer.\n    error ETHTransferFailed();\n\n    /// @dev Emitted when the native currency price is updated.\n    /// @param newPrice The new price per second of the native currency.\n    event PricePerSecondUpdated(uint256 newPrice);\n\n    /// @notice Sets the price per second of the native currency.\n    /// @param target The address of the contract implementing the access control.\n    /// @param newPrice The new price per second to be set.\n    function setPricePerSecond(address target, uint256 newPrice) external;\n\n    /// @notice Withdraws the native currency from the contract to the specified address.\n    /// @param target The address of the contract implementing the access control.\n    /// @param to The address to which the native currency should be withdrawn.\n    function withdraw(address target, address payable to) external;\n}\n"
    },
    "contracts/interfaces/ISubscription.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/// @title ISubscription\n/// @dev Interface for managing subscriptions to NFTs.\ninterface ISubscription {\n    /*//////////////////////////////////////////////////////////////\n                                 ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The subscription associated with the provided token ID is invalid or has expired.\n    error InvalidSubscription();\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Emitted when the renewability status of subscriptions is updated.\n    event RenewableUpdate(bool renewable);\n\n    /// @dev Emitted when the minimum duration for subscription renewal is updated.\n    event MinRenewalDurationUpdate(uint64 duration);\n\n    /// @dev Emitted when the maximum duration for subscription renewal is updated.\n    event MaxRenewalDurationUpdate(uint64 duration);\n\n    /*//////////////////////////////////////////////////////////////\n                           CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Checks the subscription for the given `tokenId`.\n    /// Throws if `tokenId` subscription has expired.\n    /// @param tokenId The unique identifier of the NFT token.\n    function checkSubscription(uint256 tokenId) external view;\n\n    /// @notice Returns whether the subscription for the given `tokenId` is valid.\n    /// @param tokenId The unique identifier of the NFT token.\n    /// @return A boolean indicating if the subscription is valid.\n    function isSubscriptionValid(uint256 tokenId) external view returns (bool);\n\n    /*//////////////////////////////////////////////////////////////\n                         NON-CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /*//////////   updateSubscriptionForFree variants   //////////*/\n\n    /// @notice Extends the subscription for the given `tokenId` with a specified `duration` for free.\n    /// @dev This function is meant to be called by the minter when minting the NFT to subscribe.\n    /// @param target The address of the contract implementing the access control\n    /// @param duration The duration (in seconds) to extend the subscription for.\n    /// @param tokenId The unique identifier of the NFT token to be subscribed.\n    function updateSubscriptionForFree(address target, uint64 duration, uint256 tokenId) external;\n\n    /// @notice Extends the subscription for the given `tokenIds` with a specified `duration` for free.\n    /// @dev This function is meant to be called by the minter when minting the NFT to subscribe.\n    /// @param target The address of the contract implementing the access control\n    /// @param duration The duration (in seconds) to extend the subscription for.\n    /// @param tokenIds An array of unique identifiers of the NFT tokens to update the subscriptions for.\n    function updateSubscriptionForFree(address target, uint64 duration, uint256[] calldata tokenIds) external;\n\n    /*//////////////   updateSubscription variants   /////////////*/\n\n    /// @notice Extends the subscription for the given `tokenId` with a specified `duration`, using native currency as\n    /// payment.\n    /// @dev This function is meant to be called by the minter when minting the NFT to subscribe.\n    /// @param target The address of the contract implementing the access control\n    /// @param duration The duration (in seconds) to extend the subscription for.\n    /// @param tokenId The unique identifier of the NFT token to be subscribed.\n    function updateSubscription(address target, uint64 duration, uint256 tokenId) external payable;\n\n    /// @notice Extends the subscription for the given `tokenIds` with a specified `duration`, using native currency as\n    /// payment.\n    /// @dev This function is meant to be called by the minter when minting the NFT to subscribe.\n    /// @param target The address of the contract implementing the access control\n    /// @param duration The duration (in seconds) to extend the subscription for.\n    /// @param tokenIds An array of unique identifiers of the NFT tokens to update the subscriptions for.\n    function updateSubscription(address target, uint64 duration, uint256[] calldata tokenIds) external payable;\n}\n"
    },
    "contracts/mocks/MockMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport { ISubscription } from \"../interfaces/ISubscription.sol\";\nimport { IMockNFT } from \"./MockNFT.sol\";\n\n// minter\n// for example -> `FriendsAndFamilyMinter`\ncontract MockMinter {\n    address public mockNFT;\n    address public subscription;\n\n    constructor(address _mockNFT, address _subscription) {\n        mockNFT = _mockNFT;\n        subscription = _subscription;\n    }\n\n    /// @param target The address of the contract implementing the access control\n    function mint(address target, address recipient, uint256 tokenId) external returns (uint256) {\n        // Mint the token\n        uint256 pfpTokenId = IMockNFT(mockNFT).mint({ to: recipient, tokenId: tokenId });\n\n        // Register subscription for free for 10 days\n        ISubscription(subscription).updateSubscriptionForFree({ target: target, tokenId: 1, duration: 10 days });\n\n        return pfpTokenId;\n    }\n}\n"
    },
    "contracts/mocks/MockNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport { ERC721 } from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport { ISubscription } from \"../interfaces/ISubscription.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IMockNFT {\n    error SubscriptionCannotBeZeroAddress();\n\n    function mint(address to, uint256 tokenId) external returns (uint256);\n    function burn(uint256 tokenId) external returns (uint256);\n}\n\n// cre8ors nft\ncontract MockNFT is IMockNFT, Ownable, ERC721 {\n    // REQUIRED\n    address public subscription;\n    bool public isSubscriptionEnabled;\n\n    uint256 public totalSupply;\n\n    constructor() ERC721(\"\", \"\") { }\n\n    function mint(address to, uint256 tokenId) public returns (uint256) {\n        _mint(to, tokenId);\n        totalSupply++;\n        return tokenId;\n    }\n\n    function burn(uint256 tokenId) public returns (uint256) {\n        _burn(tokenId);\n        totalSupply--;\n        return tokenId;\n    }\n\n    // REQUIRED\n    // override ownerOf\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        // external call to subscription if it is enabled and present\n        if (isSubscriptionEnabled && subscription != address(0)) {\n            bool isSubscriptionValid = ISubscription(subscription).isSubscriptionValid(tokenId);\n\n            // if subscription expired\n            if (!isSubscriptionValid) {\n                return address(0);\n            }\n        }\n        return super.ownerOf(tokenId);\n    }\n\n    // ONLY_ADMIN REQUIRED\n    function setSubscription(address s) external onlyOwner {\n        if (s == address(0)) revert SubscriptionCannotBeZeroAddress();\n        subscription = s;\n    }\n\n    // ONLY_ADMIN REQUIRED\n    function toggleSubscription() external onlyOwner {\n        isSubscriptionEnabled = !isSubscriptionEnabled;\n    }\n\n    // JUST FOR TESTING\n\n    function hasRole(bytes32, /*role*/ address /*account*/ ) external view returns (bool) {\n        return true;\n    }\n\n    function isAdmin(address /*user*/ ) public view returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/Subscription.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport { ISubscription } from \"./interfaces/ISubscription.sol\";\nimport { ERC5643 } from \"./abstracts/ERC5643.sol\";\n\ncontract Subscription is ISubscription, ERC5643 {\n    /*//////////////////////////////////////////////////////////////\n                             PRIVATE STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice A boolean value indicating whether the subscription can be renewed\n    bool private _renewable;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    /// @param cre8orsNFT_ The address of the cre8orsNFT contract.\n    /// @param minRenewalDuration_ The minimum duration allowed for subscription renewal, can be zero.\n    /// @param pricePerSecond_ The price per second for the subscription, can be zero.\n    constructor(\n        address cre8orsNFT_,\n        uint64 minRenewalDuration_,\n        uint256 pricePerSecond_\n    )\n        ERC5643(cre8orsNFT_, minRenewalDuration_, pricePerSecond_)\n    { }\n\n    /*//////////////////////////////////////////////////////////////\n                     USER-FACING CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc ISubscription\n    function checkSubscription(uint256 tokenId) external view override {\n        bool isValid = isSubscriptionValid(tokenId);\n\n        if (!isValid) {\n            revert InvalidSubscription();\n        }\n    }\n\n    /// @inheritdoc ISubscription\n    function isSubscriptionValid(uint256 tokenId) public view override returns (bool) {\n        return expiresAt(tokenId) > block.timestamp;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    ONLY-ADMIN NON-CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Sets the renewability status of subscriptions.\n    /// @dev This function can only be called by the admin.\n    /// @param renewable Boolean flag to indicate if subscriptions are renewable.\n    function setRenewable(address target, bool renewable) external onlyAdmin(target) {\n        _renewable = renewable;\n        emit RenewableUpdate(renewable);\n    }\n\n    /// @notice Sets the minimum duration for subscription renewal.\n    /// @dev This function can only be called by the admin.\n    /// @param duration The minimum duration (in seconds) for subscription renewal.\n    function setMinRenewalDuration(address target, uint64 duration) external onlyAdmin(target) {\n        _setMinimumRenewalDuration(duration);\n        emit MinRenewalDurationUpdate(duration);\n    }\n\n    /// @notice Sets the maximum duration for subscription renewal.\n    /// @dev This function can only be called by the admin.\n    /// @param duration The maximum duration (in seconds) for subscription renewal.\n    function setMaxRenewalDuration(address target, uint64 duration) external onlyAdmin(target) {\n        _setMaximumRenewalDuration(duration);\n        emit MaxRenewalDurationUpdate(duration);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n               ONLY-ADMIN-OR-MINTER NON-CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /*//////////   updateSubscriptionForFree variants   //////////*/\n\n    /// @inheritdoc ISubscription\n    function updateSubscriptionForFree(\n        address target,\n        uint64 duration,\n        uint256 tokenId\n    )\n        external\n        override\n        onlyRoleOrAdmin(target, MINTER_ROLE)\n        isDurationBetweenMinAndMax(duration)\n    {\n        _updateSubscriptionExpiration(tokenId, duration);\n    }\n\n    /// @inheritdoc ISubscription\n    function updateSubscriptionForFree(\n        address target,\n        uint64 duration,\n        uint256[] calldata tokenIds\n    )\n        external\n        override\n        onlyRoleOrAdmin(target, MINTER_ROLE)\n        isDurationBetweenMinAndMax(duration)\n    {\n        uint256 tokenId;\n\n        for (uint256 i = 0; i < tokenIds.length;) {\n            tokenId = tokenIds[i];\n\n            _updateSubscriptionExpiration(tokenId, duration);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /*//////////////   updateSubscription variants   /////////////*/\n\n    /// @inheritdoc ISubscription\n    function updateSubscription(\n        address target,\n        uint64 duration,\n        uint256 tokenId\n    )\n        external\n        payable\n        override\n        onlyRoleOrAdmin(target, MINTER_ROLE)\n        isDurationBetweenMinAndMax(duration)\n        isRenewalPriceValid(msg.value, duration)\n    {\n        // extend subscription\n        _updateSubscriptionExpiration(tokenId, duration);\n    }\n\n    /// @inheritdoc ISubscription\n    /// @dev No need to check for `tokenIds.length` as `isRenewalPriceValid` checks duration to not be zero.\n    function updateSubscription(\n        address target,\n        uint64 duration,\n        uint256[] calldata tokenIds\n    )\n        external\n        payable\n        override\n        onlyRoleOrAdmin(target, MINTER_ROLE)\n        isDurationBetweenMinAndMax(duration)\n        isRenewalPriceValid(msg.value, uint64(tokenIds.length * duration))\n    {\n        uint256 tokenId;\n\n        for (uint256 i = 0; i < tokenIds.length;) {\n            tokenId = tokenIds[i];\n\n            _updateSubscriptionExpiration(tokenId, duration);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                       INTERNAL CONSTANT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc ERC5643\n    function _isRenewable() internal view override returns (bool) {\n        return _renewable;\n    }\n\n    /// @inheritdoc ERC5643\n    function _getRenewalPrice(uint64 duration) internal view override returns (uint256) {\n        return duration * pricePerSecond;\n    }\n}\n"
    },
    "lib/CR8ORS_DROP_CONTRACT/src/interfaces/IERC721Drop.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport {IMetadataRenderer} from \"../interfaces/IMetadataRenderer.sol\";\n\n/**\n ██████╗██████╗ ███████╗ █████╗  ██████╗ ██████╗ ███████╗\n██╔════╝██╔══██╗██╔════╝██╔══██╗██╔═══██╗██╔══██╗██╔════╝\n██║     ██████╔╝█████╗  ╚█████╔╝██║   ██║██████╔╝███████╗\n██║     ██╔══██╗██╔══╝  ██╔══██╗██║   ██║██╔══██╗╚════██║\n╚██████╗██║  ██║███████╗╚█████╔╝╚██████╔╝██║  ██║███████║\n ╚═════╝╚═╝  ╚═╝╚══════╝ ╚════╝  ╚═════╝ ╚═╝  ╚═╝╚══════╝                                                       \n*/\n/// @notice Interface for Cre8ors Drop contract\ninterface IERC721Drop {\n    // Access errors\n\n    /// @notice Only admin can access this function\n    error Access_OnlyAdmin();\n    /// @notice Missing the given role or admin access\n    error Access_MissingRoleOrAdmin(bytes32 role);\n    /// @notice Withdraw is not allowed by this user\n    error Access_WithdrawNotAllowed();\n    /// @notice Cannot withdraw funds due to ETH send failure.\n    error Withdraw_FundsSendFailure();\n    /// @notice Missing the owner role.\n    error Access_OnlyOwner();\n    /// @notice Missing the owner role or approved nft access.\n    error Access_MissingOwnerOrApproved();\n\n    // Sale/Purchase errors\n    /// @notice Sale is inactive\n    error Sale_Inactive();\n    /// @notice Presale is inactive\n    error Presale_Inactive();\n    /// @notice Presale merkle root is invalid\n    error Presale_MerkleNotApproved();\n    /// @notice Wrong price for purchase\n    error Purchase_WrongPrice(uint256 correctPrice);\n    /// @notice NFT sold out\n    error Mint_SoldOut();\n    /// @notice Too many purchase for address\n    error Purchase_TooManyForAddress();\n    /// @notice Too many presale for address\n    error Presale_TooManyForAddress();\n\n    // Admin errors\n    /// @notice Royalty percentage too high\n    error Setup_RoyaltyPercentageTooHigh(uint16 maxRoyaltyBPS);\n    /// @notice Invalid admin upgrade address\n    error Admin_InvalidUpgradeAddress(address proposedAddress);\n    /// @notice Unable to finalize an edition not marked as open (size set to uint64_max_value)\n    error Admin_UnableToFinalizeNotOpenEdition();\n\n    /// @notice Event emitted for each sale\n    /// @param to address sale was made to\n    /// @param quantity quantity of the minted nfts\n    /// @param pricePerToken price for each token\n    /// @param firstPurchasedTokenId first purchased token ID (to get range add to quantity for max)\n    event Sale(\n        address indexed to,\n        uint256 indexed quantity,\n        uint256 indexed pricePerToken,\n        uint256 firstPurchasedTokenId\n    );\n\n    /// @notice Sales configuration has been changed\n    /// @dev To access new sales configuration, use getter function.\n    /// @param changedBy Changed by user\n    event SalesConfigChanged(address indexed changedBy);\n\n    /// @notice Event emitted when the funds recipient is changed\n    /// @param newAddress new address for the funds recipient\n    /// @param changedBy address that the recipient is changed by\n    event FundsRecipientChanged(\n        address indexed newAddress,\n        address indexed changedBy\n    );\n\n    /// @notice Event emitted when the funds are withdrawn from the minting contract\n    /// @param withdrawnBy address that issued the withdraw\n    /// @param withdrawnTo address that the funds were withdrawn to\n    /// @param amount amount that was withdrawn\n    event FundsWithdrawn(\n        address indexed withdrawnBy,\n        address indexed withdrawnTo,\n        uint256 amount\n    );\n\n    /// @notice Event emitted when an open mint is finalized and further minting is closed forever on the contract.\n    /// @param sender address sending close mint\n    /// @param numberOfMints number of mints the contract is finalized at\n    event OpenMintFinalized(address indexed sender, uint256 numberOfMints);\n\n    /// @notice Event emitted when metadata renderer is updated.\n    /// @param sender address of the updater\n    /// @param renderer new metadata renderer address\n    event UpdatedMetadataRenderer(address sender, IMetadataRenderer renderer);\n\n    /// @notice General configuration for NFT Minting and bookkeeping\n    struct Configuration {\n        /// @dev Metadata renderer (uint160)\n        IMetadataRenderer metadataRenderer;\n        /// @dev Total size of edition that can be minted (uint160+64 = 224)\n        uint64 editionSize;\n        /// @dev Royalty amount in bps (uint224+16 = 240)\n        uint16 royaltyBPS;\n        /// @dev Funds recipient for sale (new slot, uint160)\n        address payable fundsRecipient;\n    }\n\n    /// @notice Sales states and configuration\n    /// @dev Uses 3 storage slots\n    struct SalesConfiguration {\n        /// @dev Public sale price (max ether value > 1000 ether with this value)\n        uint104 publicSalePrice;\n        /// @dev ERC20 Token\n        address erc20PaymentToken;\n        /// @notice Purchase mint limit per address (if set to 0 === unlimited mints)\n        /// @dev Max purchase number per txn (90+32 = 122)\n        uint32 maxSalePurchasePerAddress;\n        /// @dev uint64 type allows for dates into 292 billion years\n        /// @notice Public sale start timestamp (136+64 = 186)\n        uint64 publicSaleStart;\n        /// @notice Public sale end timestamp (186+64 = 250)\n        uint64 publicSaleEnd;\n        /// @notice Presale start timestamp\n        /// @dev new storage slot\n        uint64 presaleStart;\n        /// @notice Presale end timestamp\n        uint64 presaleEnd;\n        /// @notice Presale merkle root\n        bytes32 presaleMerkleRoot;\n    }\n\n    /// @notice CRE8ORS - General configuration for Builder Rewards burn requirements\n    struct BurnConfiguration {\n        /// @dev Token to burn\n        address burnToken;\n        /// @dev Required number of tokens to burn\n        uint256 burnQuantity;\n    }\n\n    /// @notice Sales states and configuration\n    /// @dev Uses 3 storage slots\n    struct ERC20SalesConfiguration {\n        /// @notice Public sale price\n        /// @dev max ether value > 1000 ether with this value\n        uint104 publicSalePrice;\n        /// @dev ERC20 Token\n        address erc20PaymentToken;\n        /// @notice Purchase mint limit per address (if set to 0 === unlimited mints)\n        /// @dev Max purchase number per txn (90+32 = 122)\n        uint32 maxSalePurchasePerAddress;\n        /// @dev uint64 type allows for dates into 292 billion years\n        /// @notice Public sale start timestamp (136+64 = 186)\n        uint64 publicSaleStart;\n        /// @notice Public sale end timestamp (186+64 = 250)\n        uint64 publicSaleEnd;\n        /// @notice Presale start timestamp\n        /// @dev new storage slot\n        uint64 presaleStart;\n        /// @notice Presale end timestamp\n        uint64 presaleEnd;\n        /// @notice Presale merkle root\n        bytes32 presaleMerkleRoot;\n    }\n\n    /// @notice Return value for sales details to use with front-ends\n    struct SaleDetails {\n        // Synthesized status variables for sale and presale\n        bool publicSaleActive;\n        bool presaleActive;\n        // Price for public sale\n        uint256 publicSalePrice;\n        // Timed sale actions for public sale\n        uint64 publicSaleStart;\n        uint64 publicSaleEnd;\n        // Timed sale actions for presale\n        uint64 presaleStart;\n        uint64 presaleEnd;\n        // Merkle root (includes address, quantity, and price data for each entry)\n        bytes32 presaleMerkleRoot;\n        // Limit public sale to a specific number of mints per wallet\n        uint256 maxSalePurchasePerAddress;\n        // Information about the rest of the supply\n        // Total that have been minted\n        uint256 totalMinted;\n        // The total supply available\n        uint256 maxSupply;\n    }\n\n    /// @notice Return value for sales details to use with front-ends\n    struct ERC20SaleDetails {\n        /// @notice Synthesized status variables for sale\n        bool publicSaleActive;\n        /// @notice Synthesized status variables for presale\n        bool presaleActive;\n        /// @notice Price for public sale\n        uint256 publicSalePrice;\n        /// @notice ERC20 contract address for payment. address(0) for ETH.\n        address erc20PaymentToken;\n        /// @notice public sale start\n        uint64 publicSaleStart;\n        /// @notice public sale end\n        uint64 publicSaleEnd;\n        /// @notice Timed sale actions for presale start\n        uint64 presaleStart;\n        /// @notice Timed sale actions for presale end\n        uint64 presaleEnd;\n        /// @notice Merkle root (includes address, quantity, and price data for each entry)\n        bytes32 presaleMerkleRoot;\n        /// @notice Limit public sale to a specific number of mints per wallet\n        uint256 maxSalePurchasePerAddress;\n        /// @notice Total that have been minted\n        uint256 totalMinted;\n        /// @notice The total supply available\n        uint256 maxSupply;\n    }\n\n    /// @notice Return type of specific mint counts and details per address\n    struct AddressMintDetails {\n        /// Number of total mints from the given address\n        uint256 totalMints;\n        /// Number of presale mints from the given address\n        uint256 presaleMints;\n        /// Number of public mints from the given address\n        uint256 publicMints;\n    }\n\n    /// @notice External purchase function (payable in eth)\n    /// @param quantity to purchase\n    /// @return first minted token ID\n    function purchase(uint256 quantity) external payable returns (uint256);\n\n    /// @notice External purchase presale function (takes a merkle proof and matches to root) (payable in eth)\n    /// @param quantity to purchase\n    /// @param maxQuantity can purchase (verified by merkle root)\n    /// @param pricePerToken price per token allowed (verified by merkle root)\n    /// @param merkleProof input for merkle proof leaf verified by merkle root\n    /// @return first minted token ID\n    function purchasePresale(\n        uint256 quantity,\n        uint256 maxQuantity,\n        uint256 pricePerToken,\n        bytes32[] memory merkleProof\n    ) external payable returns (uint256);\n\n    /// @notice Function to return the global sales details for the given drop\n    function saleDetails() external view returns (ERC20SaleDetails memory);\n\n    /// @notice Function to return the specific sales details for a given address\n    /// @param minter address for minter to return mint information for\n    function mintedPerAddress(\n        address minter\n    ) external view returns (AddressMintDetails memory);\n\n    /// @notice This is the opensea/public owner setting that can be set by the contract admin\n    function owner() external view returns (address);\n\n    /// @notice Update the metadata renderer\n    /// @param newRenderer new address for renderer\n    /// @param setupRenderer data to call to bootstrap data for the new renderer (optional)\n    function setMetadataRenderer(\n        IMetadataRenderer newRenderer,\n        bytes memory setupRenderer\n    ) external;\n\n    /// @notice This is an admin mint function to mint a quantity to a specific address\n    /// @param to address to mint to\n    /// @param quantity quantity to mint\n    /// @return the id of the first minted NFT\n    function adminMint(address to, uint256 quantity) external returns (uint256);\n\n    /// @notice This is an admin mint function to mint a single nft each to a list of addresses\n    /// @param to list of addresses to mint an NFT each to\n    /// @return the id of the first minted NFT\n    function adminMintAirdrop(address[] memory to) external returns (uint256);\n\n    /// @dev Getter for admin role associated with the contract to handle metadata\n    /// @return boolean if address is admin\n    function isAdmin(address user) external view returns (bool);\n}\n"
    },
    "lib/CR8ORS_DROP_CONTRACT/src/interfaces/IMetadataRenderer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\n/**\n ██████╗██████╗ ███████╗ █████╗  ██████╗ ██████╗ ███████╗\n██╔════╝██╔══██╗██╔════╝██╔══██╗██╔═══██╗██╔══██╗██╔════╝\n██║     ██████╔╝█████╗  ╚█████╔╝██║   ██║██████╔╝███████╗\n██║     ██╔══██╗██╔══╝  ██╔══██╗██║   ██║██╔══██╗╚════██║\n╚██████╗██║  ██║███████╗╚█████╔╝╚██████╔╝██║  ██║███████║\n ╚═════╝╚═╝  ╚═╝╚══════╝ ╚════╝  ╚═════╝ ╚═╝  ╚═╝╚══════╝                                                     \n */\n\n/// @dev credit: https://github.com/ourzora/zora-drops-contracts\ninterface IMetadataRenderer {\n    function tokenURI(uint256) external view returns (string memory);\n\n    function contractURI() external view returns (string memory);\n\n    function initializeWithData(bytes memory initData) external;\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates",
          "storageLayout",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "evmVersion": "paris",
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    },
    "remappings": [
      "@crea8ors/=lib/CR8ORS_DROP_CONTRACT/src/",
      "@openzeppelin/=lib/openzeppelin-contracts/",
      "CR8ORS_DROP_CONTRACT/=lib/CR8ORS_DROP_CONTRACT/src/",
      "ERC6551/=lib/CR8ORS_DROP_CONTRACT/lib/ERC6551/",
      "ERC721A-Upgradeable/=lib/CR8ORS_DROP_CONTRACT/lib/ERC721A-Upgradeable/contracts/",
      "ERC721A/=lib/CR8ORS_DROP_CONTRACT/lib/ERC721A/contracts/",
      "account-abstraction/=lib/CR8ORS_DROP_CONTRACT/lib/account-abstraction/contracts/",
      "creator-token-contracts/=lib/CR8ORS_DROP_CONTRACT/lib/creator-token-contracts/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "murky/=lib/CR8ORS_DROP_CONTRACT/lib/creator-token-contracts/lib/murky/src/",
      "openzeppelin-contracts-upgradeable/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "reference/=lib/CR8ORS_DROP_CONTRACT/lib/tokenbound/lib/reference/",
      "src/=src/",
      "tokenbound/=lib/CR8ORS_DROP_CONTRACT/lib/tokenbound/",
      "lib/CR8ORS_DROP_CONTRACT:@openzeppelin/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts/",
      "lib/CR8ORS_DROP_CONTRACT:@openzeppelin/contracts-upgradeable/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts-upgradeable/contracts/",
      "lib/CR8ORS_DROP_CONTRACT:@openzeppelin/contracts/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts/contracts/",
      "lib/CR8ORS_DROP_CONTRACT:ERC6551/=lib/CR8ORS_DROP_CONTRACT/lib/ERC6551/",
      "lib/CR8ORS_DROP_CONTRACT:ERC721A-Upgradeable/=lib/CR8ORS_DROP_CONTRACT/lib/ERC721A-Upgradeable/contracts/",
      "lib/CR8ORS_DROP_CONTRACT:ERC721A/=lib/CR8ORS_DROP_CONTRACT/lib/ERC721A/contracts/",
      "lib/CR8ORS_DROP_CONTRACT:ERC721C/=lib/CR8ORS_DROP_CONTRACT/lib/creator-token-contracts/contracts/",
      "lib/CR8ORS_DROP_CONTRACT:account-abstraction/=lib/CR8ORS_DROP_CONTRACT/lib/account-abstraction/contracts/",
      "lib/CR8ORS_DROP_CONTRACT:creator-token-contracts/=lib/CR8ORS_DROP_CONTRACT/lib/creator-token-contracts/contracts/",
      "lib/CR8ORS_DROP_CONTRACT:ds-test/=lib/CR8ORS_DROP_CONTRACT/lib/forge-std/lib/ds-test/src/",
      "lib/CR8ORS_DROP_CONTRACT:erc4626-tests/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts/lib/erc4626-tests/",
      "lib/CR8ORS_DROP_CONTRACT:erc6551/=lib/CR8ORS_DROP_CONTRACT/lib/tokenbound/lib/reference/src/",
      "lib/CR8ORS_DROP_CONTRACT:erc721a/=lib/CR8ORS_DROP_CONTRACT/lib/ERC721A/",
      "lib/CR8ORS_DROP_CONTRACT:forge-std/=lib/CR8ORS_DROP_CONTRACT/lib/forge-std/src/",
      "lib/CR8ORS_DROP_CONTRACT:murky/=lib/CR8ORS_DROP_CONTRACT/lib/creator-token-contracts/lib/murky/src/",
      "lib/CR8ORS_DROP_CONTRACT:openzeppelin-contracts-upgradeable/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts-upgradeable/",
      "lib/CR8ORS_DROP_CONTRACT:openzeppelin-contracts/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts/contracts/",
      "lib/CR8ORS_DROP_CONTRACT:reference/=lib/CR8ORS_DROP_CONTRACT/lib/tokenbound/lib/reference/",
      "lib/CR8ORS_DROP_CONTRACT:sstore2/=lib/CR8ORS_DROP_CONTRACT/lib/ERC6551/lib/sstore2/contracts/",
      "lib/CR8ORS_DROP_CONTRACT:tokenbound/=lib/CR8ORS_DROP_CONTRACT/lib/tokenbound/",
      "lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/",
      "lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
      "lib/openzeppelin-contracts:erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/",
      "lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/"
    ]
  }
}