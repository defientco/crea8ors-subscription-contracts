{
  "address": "0xe0E2558ed68A8024364f2ed21f7E6e649c848e2c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cre8orsNFT_",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "minRenewalDuration_",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "pricePerSecond_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Access_MissingOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "Access_MissingRoleOrAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Access_OnlyAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DurationForRenewalPriceCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSubscription",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RenewalTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RenewalTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubscriptionNotRenewable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ValueCannotBeZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        }
      ],
      "name": "MaxRenewalDurationUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        }
      ],
      "name": "MinRenewalDurationUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "PricePerSecondUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "renewable",
          "type": "bool"
        }
      ],
      "name": "RenewableUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expiration",
          "type": "uint64"
        }
      ],
      "name": "SubscriptionUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkSubscription",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cre8orsNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "expiresAt",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isRenewable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isSubscriptionValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRenewalDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRenewalDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        }
      ],
      "name": "renewSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "setCre8orsNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        }
      ],
      "name": "setMaxRenewalDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        }
      ],
      "name": "setMinRenewalDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setPricePerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "renewable",
          "type": "bool"
        }
      ],
      "name": "setRenewable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "updateSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "updateSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "updateSubscriptionForFree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "updateSubscriptionForFree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c31814e6facfb120bcc1564c96a19c789a3218b71eb294cc1fe3bb597664f6d",
  "receipt": {
    "to": null,
    "from": "0xde43f899587aaa2Ea6aD243F3d68a5027F2C6a94",
    "contractAddress": "0xe0E2558ed68A8024364f2ed21f7E6e649c848e2c",
    "transactionIndex": 50,
    "gasUsed": "1370932",
    "logsBloom": "0x
    "blockHash": "0xed80812529d1241fd3172cce8827db8e47b68aa915acb9531b35a6beb5cca61a",
    "transactionHash": "0x6c31814e6facfb120bcc1564c96a19c789a3218b71eb294cc1fe3bb597664f6d",
    "logs": [],
    "blockNumber": 9451832,
    "cumulativeGasUsed": "17071077",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    86400,
    "38580246913"
  ],
  "numDeployments": 1,
  "solcInputHash": "740e86849d6efbac9c66ece6cc097aae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cre8orsNFT_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"minRenewalDuration_\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Access_MissingOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"Access_MissingRoleOrAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Access_OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DurationForRenewalPriceCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSubscription\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RenewalTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RenewalTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubscriptionNotRenewable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueCannotBeZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"MaxRenewalDurationUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"MinRenewalDurationUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PricePerSecondUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"renewable\",\"type\":\"bool\"}],\"name\":\"RenewableUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"}],\"name\":\"SubscriptionUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkSubscription\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cre8orsNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"expiresAt\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isRenewable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isSubscriptionValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRenewalDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRenewalDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"renewSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"setCre8orsNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"setMaxRenewalDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"setMinRenewalDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPricePerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"renewable\",\"type\":\"bool\"}],\"name\":\"setRenewable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"updateSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updateSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updateSubscriptionForFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"updateSubscriptionForFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"MaxRenewalDurationUpdate(uint64)\":{\"details\":\"Emitted when the maximum duration for subscription renewal is updated.\"},\"MinRenewalDurationUpdate(uint64)\":{\"details\":\"Emitted when the minimum duration for subscription renewal is updated.\"},\"PricePerSecondUpdated(uint256)\":{\"details\":\"Emitted when the native currency price is updated.\",\"params\":{\"newPrice\":\"The new price per second of the native currency.\"}},\"RenewableUpdate(bool)\":{\"details\":\"Emitted when the renewability status of subscriptions is updated.\"},\"SubscriptionUpdate(uint256,uint64)\":{\"details\":\"When a subscription is canceled, the expiration value should also be 0.\"}},\"kind\":\"dev\",\"methods\":{\"cancelSubscription(uint256)\":{\"details\":\"Throws if `tokenId` is not a valid NFT\",\"params\":{\"tokenId\":\"The NFT to cancel the subscription for\"}},\"checkSubscription(uint256)\":{\"params\":{\"tokenId\":\"The unique identifier of the NFT token.\"}},\"constructor\":{\"params\":{\"cre8orsNFT_\":\"The address of the cre8orsNFT contract.\",\"minRenewalDuration_\":\"The minimum duration allowed for subscription renewal, can be zero.\",\"pricePerSecond_\":\"The price per second for the subscription, can be zero.\"}},\"expiresAt(uint256)\":{\"details\":\"Throws if `tokenId` is not a valid NFT\",\"params\":{\"tokenId\":\"The NFT to get the expiration date of\"},\"returns\":{\"_0\":\"The expiration date of the subscription\"}},\"isAdmin(address,address)\":{\"params\":{\"target\":\"The address of the contract implementing the access control\",\"user\":\"The address to check for admin access\"},\"returns\":{\"_0\":\"Whether the address has admin access or not\"}},\"isRenewable(uint256)\":{\"details\":\"Throws if `tokenId` is not a valid NFT\",\"params\":{\"tokenId\":\"The NFT to get the expiration date of\"},\"returns\":{\"_0\":\"The renewability of a the subscription\"}},\"isSubscriptionValid(uint256)\":{\"params\":{\"tokenId\":\"The unique identifier of the NFT token.\"},\"returns\":{\"_0\":\"A boolean indicating if the subscription is valid.\"}},\"renewSubscription(uint256,uint64)\":{\"params\":{\"duration\":\"The number of seconds to extend a subscription for\",\"tokenId\":\"The NFT to renew the subscription for\"}},\"setCre8orsNFT(address)\":{\"details\":\"This function can only be called by the contract admin.\",\"params\":{\"target\":\"The address of the new cre8ors contract.\"}},\"setMaxRenewalDuration(address,uint64)\":{\"details\":\"This function can only be called by the admin.\",\"params\":{\"duration\":\"The maximum duration (in seconds) for subscription renewal.\"}},\"setMinRenewalDuration(address,uint64)\":{\"details\":\"This function can only be called by the admin.\",\"params\":{\"duration\":\"The minimum duration (in seconds) for subscription renewal.\"}},\"setPricePerSecond(address,uint256)\":{\"params\":{\"newPrice\":\"The new price per second to be set.\",\"target\":\"The address of the contract implementing the access control.\"}},\"setRenewable(address,bool)\":{\"details\":\"This function can only be called by the admin.\",\"params\":{\"renewable\":\"Boolean flag to indicate if subscriptions are renewable.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateSubscription(address,uint64,uint256)\":{\"details\":\"This function is meant to be called by the minter when minting the NFT to subscribe.\",\"params\":{\"duration\":\"The duration (in seconds) to extend the subscription for.\",\"target\":\"The address of the contract implementing the access control\",\"tokenId\":\"The unique identifier of the NFT token to be subscribed.\"}},\"updateSubscription(address,uint64,uint256[])\":{\"details\":\"No need to check for `tokenIds.length` as `isRenewalPriceValid` checks duration to not be zero.\",\"params\":{\"duration\":\"The duration (in seconds) to extend the subscription for.\",\"target\":\"The address of the contract implementing the access control\",\"tokenIds\":\"An array of unique identifiers of the NFT tokens to update the subscriptions for.\"}},\"updateSubscriptionForFree(address,uint64,uint256)\":{\"details\":\"This function is meant to be called by the minter when minting the NFT to subscribe.\",\"params\":{\"duration\":\"The duration (in seconds) to extend the subscription for.\",\"target\":\"The address of the contract implementing the access control\",\"tokenId\":\"The unique identifier of the NFT token to be subscribed.\"}},\"updateSubscriptionForFree(address,uint64,uint256[])\":{\"details\":\"This function is meant to be called by the minter when minting the NFT to subscribe.\",\"params\":{\"duration\":\"The duration (in seconds) to extend the subscription for.\",\"target\":\"The address of the contract implementing the access control\",\"tokenIds\":\"An array of unique identifiers of the NFT tokens to update the subscriptions for.\"}},\"withdraw(address,address)\":{\"params\":{\"target\":\"The address of the contract implementing the access control.\",\"to\":\"The address to which the native currency should be withdrawn.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"Access_MissingOwnerOrApproved()\":[{\"notice\":\"Missing the owner role or approved nft access.\"}],\"Access_MissingRoleOrAdmin(bytes32)\":[{\"notice\":\"Missing the given role or admin access\"}],\"Access_OnlyAdmin()\":[{\"notice\":\"Only admin can access this function\"}],\"AddressCannotBeZero()\":[{\"notice\":\"given address is invalid.\"}],\"DurationForRenewalPriceCannotBeZero()\":[{\"notice\":\"The duration provided for renewal price calculation cannot be zero.\"}],\"ETHTransferFailed()\":[{\"notice\":\"Error message for failed ETH transfer.\"}],\"InsufficientPayment()\":[{\"notice\":\"The payment received for the subscription renewal is insufficient.\"}],\"InvalidSubscription()\":[{\"notice\":\"The subscription associated with the provided token ID is invalid or has expired.\"}],\"RenewalTooLong()\":[{\"notice\":\"The duration provided for renewal exceeds the allowed maximum for subscription extension.\"}],\"RenewalTooShort()\":[{\"notice\":\"The duration provided for renewal is too short to extend the subscription.\"}],\"SubscriptionNotRenewable()\":[{\"notice\":\"The subscription associated with the token is not renewable and cannot be extended.\"}],\"ValueCannotBeZero()\":[{\"notice\":\"Error message for zero value.\"}]},\"events\":{\"SubscriptionUpdate(uint256,uint64)\":{\"notice\":\"Emitted when a subscription expiration changes\"}},\"kind\":\"user\",\"methods\":{\"MINTER_ROLE()\":{\"notice\":\"Access control roles\"},\"cancelSubscription(uint256)\":{\"notice\":\"Cancels the subscription of an NFT\"},\"checkSubscription(uint256)\":{\"notice\":\"Checks the subscription for the given `tokenId`. Throws if `tokenId` subscription has expired.\"},\"cre8orsNFT()\":{\"notice\":\"The address of the collection contract that mints and manages the tokens.\"},\"expiresAt(uint256)\":{\"notice\":\"Gets the expiration date of a subscription\"},\"isAdmin(address,address)\":{\"notice\":\"Getter for admin role associated with the contract to handle minting\"},\"isRenewable(uint256)\":{\"notice\":\"Determines whether a subscription can be renewed\"},\"isSubscriptionValid(uint256)\":{\"notice\":\"Returns whether the subscription for the given `tokenId` is valid.\"},\"maxRenewalDuration()\":{\"notice\":\"The maximum duration allowed for subscription renewal. A value of 0 means lifetime extension is allowed.\"},\"minRenewalDuration()\":{\"notice\":\"The minimum duration allowed for subscription renewal.\"},\"pricePerSecond()\":{\"notice\":\"The price per second for the subscription in native currency.\"},\"renewSubscription(uint256,uint64)\":{\"notice\":\"Renews the subscription to an NFT Throws if `tokenId` is not a valid NFT\"},\"setCre8orsNFT(address)\":{\"notice\":\"Set the address of the cre8ors contract.\"},\"setMaxRenewalDuration(address,uint64)\":{\"notice\":\"Sets the maximum duration for subscription renewal.\"},\"setMinRenewalDuration(address,uint64)\":{\"notice\":\"Sets the minimum duration for subscription renewal.\"},\"setPricePerSecond(address,uint256)\":{\"notice\":\"Sets the price per second of the native currency.\"},\"setRenewable(address,bool)\":{\"notice\":\"Sets the renewability status of subscriptions.\"},\"updateSubscription(address,uint64,uint256)\":{\"notice\":\"Extends the subscription for the given `tokenId` with a specified `duration`, using native currency as payment.\"},\"updateSubscription(address,uint64,uint256[])\":{\"notice\":\"Extends the subscription for the given `tokenIds` with a specified `duration`, using native currency as payment.\"},\"updateSubscriptionForFree(address,uint64,uint256)\":{\"notice\":\"Extends the subscription for the given `tokenId` with a specified `duration` for free.\"},\"updateSubscriptionForFree(address,uint64,uint256[])\":{\"notice\":\"Extends the subscription for the given `tokenIds` with a specified `duration` for free.\"},\"withdraw(address,address)\":{\"notice\":\"Withdraws the native currency from the contract to the specified address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Subscription.sol\":\"Subscription\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@crea8ors/=lib/CR8ORS_DROP_CONTRACT/src/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":CR8ORS_DROP_CONTRACT/=lib/CR8ORS_DROP_CONTRACT/src/\",\":ERC6551/=lib/CR8ORS_DROP_CONTRACT/lib/ERC6551/\",\":ERC721A-Upgradeable/=lib/CR8ORS_DROP_CONTRACT/lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/CR8ORS_DROP_CONTRACT/lib/ERC721A/contracts/\",\":account-abstraction/=lib/CR8ORS_DROP_CONTRACT/lib/account-abstraction/contracts/\",\":creator-token-contracts/=lib/CR8ORS_DROP_CONTRACT/lib/creator-token-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":murky/=lib/CR8ORS_DROP_CONTRACT/lib/creator-token-contracts/lib/murky/src/\",\":openzeppelin-contracts-upgradeable/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":reference/=lib/CR8ORS_DROP_CONTRACT/lib/tokenbound/lib/reference/\",\":src/=src/\",\":tokenbound/=lib/CR8ORS_DROP_CONTRACT/lib/tokenbound/\",\"lib/CR8ORS_DROP_CONTRACT:@openzeppelin/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts/\",\"lib/CR8ORS_DROP_CONTRACT:@openzeppelin/contracts-upgradeable/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts-upgradeable/contracts/\",\"lib/CR8ORS_DROP_CONTRACT:@openzeppelin/contracts/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts/contracts/\",\"lib/CR8ORS_DROP_CONTRACT:ERC6551/=lib/CR8ORS_DROP_CONTRACT/lib/ERC6551/\",\"lib/CR8ORS_DROP_CONTRACT:ERC721A-Upgradeable/=lib/CR8ORS_DROP_CONTRACT/lib/ERC721A-Upgradeable/contracts/\",\"lib/CR8ORS_DROP_CONTRACT:ERC721A/=lib/CR8ORS_DROP_CONTRACT/lib/ERC721A/contracts/\",\"lib/CR8ORS_DROP_CONTRACT:ERC721C/=lib/CR8ORS_DROP_CONTRACT/lib/creator-token-contracts/contracts/\",\"lib/CR8ORS_DROP_CONTRACT:account-abstraction/=lib/CR8ORS_DROP_CONTRACT/lib/account-abstraction/contracts/\",\"lib/CR8ORS_DROP_CONTRACT:creator-token-contracts/=lib/CR8ORS_DROP_CONTRACT/lib/creator-token-contracts/contracts/\",\"lib/CR8ORS_DROP_CONTRACT:ds-test/=lib/CR8ORS_DROP_CONTRACT/lib/forge-std/lib/ds-test/src/\",\"lib/CR8ORS_DROP_CONTRACT:erc4626-tests/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts/lib/erc4626-tests/\",\"lib/CR8ORS_DROP_CONTRACT:erc6551/=lib/CR8ORS_DROP_CONTRACT/lib/tokenbound/lib/reference/src/\",\"lib/CR8ORS_DROP_CONTRACT:erc721a/=lib/CR8ORS_DROP_CONTRACT/lib/ERC721A/\",\"lib/CR8ORS_DROP_CONTRACT:forge-std/=lib/CR8ORS_DROP_CONTRACT/lib/forge-std/src/\",\"lib/CR8ORS_DROP_CONTRACT:murky/=lib/CR8ORS_DROP_CONTRACT/lib/creator-token-contracts/lib/murky/src/\",\"lib/CR8ORS_DROP_CONTRACT:openzeppelin-contracts-upgradeable/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts-upgradeable/\",\"lib/CR8ORS_DROP_CONTRACT:openzeppelin-contracts/=lib/CR8ORS_DROP_CONTRACT/lib/openzeppelin-contracts/contracts/\",\"lib/CR8ORS_DROP_CONTRACT:reference/=lib/CR8ORS_DROP_CONTRACT/lib/tokenbound/lib/reference/\",\"lib/CR8ORS_DROP_CONTRACT:sstore2/=lib/CR8ORS_DROP_CONTRACT/lib/ERC6551/lib/sstore2/contracts/\",\"lib/CR8ORS_DROP_CONTRACT:tokenbound/=lib/CR8ORS_DROP_CONTRACT/lib/tokenbound/\",\"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\"lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\"lib/openzeppelin-contracts:erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\"lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\"lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"contracts/Subscription.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { ISubscription } from \\\"./interfaces/ISubscription.sol\\\";\\nimport { ERC5643 } from \\\"./abstracts/ERC5643.sol\\\";\\n\\ncontract Subscription is ISubscription, ERC5643 {\\n    /*//////////////////////////////////////////////////////////////\\n                             PRIVATE STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice A boolean value indicating whether the subscription can be renewed\\n    bool private _renewable;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @param cre8orsNFT_ The address of the cre8orsNFT contract.\\n    /// @param minRenewalDuration_ The minimum duration allowed for subscription renewal, can be zero.\\n    /// @param pricePerSecond_ The price per second for the subscription, can be zero.\\n    constructor(\\n        address cre8orsNFT_,\\n        uint64 minRenewalDuration_,\\n        uint256 pricePerSecond_\\n    )\\n        ERC5643(cre8orsNFT_, minRenewalDuration_, pricePerSecond_)\\n    { }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     USER-FACING CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc ISubscription\\n    function checkSubscription(uint256 tokenId) external view override {\\n        bool isValid = isSubscriptionValid(tokenId);\\n\\n        if (!isValid) {\\n            revert InvalidSubscription();\\n        }\\n    }\\n\\n    /// @inheritdoc ISubscription\\n    function isSubscriptionValid(uint256 tokenId) public view override returns (bool) {\\n        return expiresAt(tokenId) > block.timestamp;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    ONLY-ADMIN NON-CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Sets the renewability status of subscriptions.\\n    /// @dev This function can only be called by the admin.\\n    /// @param renewable Boolean flag to indicate if subscriptions are renewable.\\n    function setRenewable(address target, bool renewable) external onlyAdmin(target) {\\n        _renewable = renewable;\\n        emit RenewableUpdate(renewable);\\n    }\\n\\n    /// @notice Sets the minimum duration for subscription renewal.\\n    /// @dev This function can only be called by the admin.\\n    /// @param duration The minimum duration (in seconds) for subscription renewal.\\n    function setMinRenewalDuration(address target, uint64 duration) external onlyAdmin(target) {\\n        _setMinimumRenewalDuration(duration);\\n        emit MinRenewalDurationUpdate(duration);\\n    }\\n\\n    /// @notice Sets the maximum duration for subscription renewal.\\n    /// @dev This function can only be called by the admin.\\n    /// @param duration The maximum duration (in seconds) for subscription renewal.\\n    function setMaxRenewalDuration(address target, uint64 duration) external onlyAdmin(target) {\\n        _setMaximumRenewalDuration(duration);\\n        emit MaxRenewalDurationUpdate(duration);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n               ONLY-ADMIN-OR-MINTER NON-CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /*//////////   updateSubscriptionForFree variants   //////////*/\\n\\n    /// @inheritdoc ISubscription\\n    function updateSubscriptionForFree(\\n        address target,\\n        uint64 duration,\\n        uint256 tokenId\\n    )\\n        external\\n        override\\n        onlyRoleOrAdmin(target, MINTER_ROLE)\\n        isDurationBetweenMinAndMax(duration)\\n    {\\n        _updateSubscriptionExpiration(tokenId, duration);\\n    }\\n\\n    /// @inheritdoc ISubscription\\n    function updateSubscriptionForFree(\\n        address target,\\n        uint64 duration,\\n        uint256[] calldata tokenIds\\n    )\\n        external\\n        override\\n        onlyRoleOrAdmin(target, MINTER_ROLE)\\n        isDurationBetweenMinAndMax(duration)\\n    {\\n        uint256 tokenId;\\n\\n        for (uint256 i = 0; i < tokenIds.length;) {\\n            tokenId = tokenIds[i];\\n\\n            _updateSubscriptionExpiration(tokenId, duration);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /*//////////////   updateSubscription variants   /////////////*/\\n\\n    /// @inheritdoc ISubscription\\n    function updateSubscription(\\n        address target,\\n        uint64 duration,\\n        uint256 tokenId\\n    )\\n        external\\n        payable\\n        override\\n        onlyRoleOrAdmin(target, MINTER_ROLE)\\n        isDurationBetweenMinAndMax(duration)\\n        isRenewalPriceValid(msg.value, duration)\\n    {\\n        // extend subscription\\n        _updateSubscriptionExpiration(tokenId, duration);\\n    }\\n\\n    /// @inheritdoc ISubscription\\n    /// @dev No need to check for `tokenIds.length` as `isRenewalPriceValid` checks duration to not be zero.\\n    function updateSubscription(\\n        address target,\\n        uint64 duration,\\n        uint256[] calldata tokenIds\\n    )\\n        external\\n        payable\\n        override\\n        onlyRoleOrAdmin(target, MINTER_ROLE)\\n        isDurationBetweenMinAndMax(duration)\\n        isRenewalPriceValid(msg.value, uint64(tokenIds.length * duration))\\n    {\\n        uint256 tokenId;\\n\\n        for (uint256 i = 0; i < tokenIds.length;) {\\n            tokenId = tokenIds[i];\\n\\n            _updateSubscriptionExpiration(tokenId, duration);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                       INTERNAL CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc ERC5643\\n    function _isRenewable() internal view override returns (bool) {\\n        return _renewable;\\n    }\\n\\n    /// @inheritdoc ERC5643\\n    function _getRenewalPrice(uint64 duration) internal view override returns (uint256) {\\n        return duration * pricePerSecond;\\n    }\\n}\\n\",\"keccak256\":\"0x7c668b208cb59e89c024b0f8a6ba1fe98698024078d61c2e777090abf498263c\",\"license\":\"MIT\"},\"contracts/abstracts/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { IERC721Drop } from \\\"@crea8ors/interfaces/IERC721Drop.sol\\\";\\nimport { IAccessControl } from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport { Base } from \\\"./Base.sol\\\";\\n\\n/// @title Admin\\n/// @notice An abstract contract with access control functionality.\\nabstract contract Admin is Base {\\n    /// @notice Access control roles\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n\\n    /// @notice Modifier to allow only users with admin access\\n    /// @param target The address of the contract implementing the access control\\n    modifier onlyAdmin(address target) {\\n        if (!isAdmin(target, msg.sender)) {\\n            revert IERC721Drop.Access_OnlyAdmin();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Modifier to allow only a given role or admin access\\n    /// @param target The address of the contract implementing the access control\\n    /// @param role The role to check for alongside the admin role\\n    modifier onlyRoleOrAdmin(address target, bytes32 role) {\\n        if (!isAdmin(target, msg.sender) && !IAccessControl(target).hasRole(role, msg.sender)) {\\n            revert IERC721Drop.Access_MissingRoleOrAdmin(role);\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Getter for admin role associated with the contract to handle minting\\n    /// @param target The address of the contract implementing the access control\\n    /// @param user The address to check for admin access\\n    /// @return Whether the address has admin access or not\\n    function isAdmin(address target, address user) public view returns (bool) {\\n        return IERC721Drop(target).isAdmin(user);\\n    }\\n}\\n\",\"keccak256\":\"0x5ee87c04c86031ef60a85597468c4c00c4737488bea033af538a5ecabe624938\",\"license\":\"MIT\"},\"contracts/abstracts/Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Base\\n/// @notice A base abstract contract implementing common functionality for other contracts.\\nabstract contract Base {\\n    /// @notice given address is invalid.\\n    error AddressCannotBeZero();\\n\\n    /// @dev Modifier to check if the provided address is not the zero address.\\n    /// @param addr The address to be checked.\\n    modifier notZeroAddress(address addr) {\\n        if (addr == address(0)) {\\n            revert AddressCannotBeZero();\\n        }\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6f0dc7c89d71455388de85cdca6c7af2911373ab155cc340ca1aa70c100c807b\",\"license\":\"MIT\"},\"contracts/abstracts/ERC5643.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC5643 } from \\\"../interfaces/IERC5643.sol\\\";\\nimport { PaymentSystem } from \\\"../abstracts/PaymentSystem.sol\\\";\\nimport { IERC721Drop } from \\\"@crea8ors/interfaces/IERC721Drop.sol\\\";\\n\\n/// @title ERC5643\\n/// @notice An abstract contract implementing the IERC5643 interface for managing subscriptions to ERC721 tokens.\\nabstract contract ERC5643 is IERC5643, PaymentSystem {\\n    /*//////////////////////////////////////////////////////////////\\n                             PRIVATE STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Mapping to store the expiration timestamps for each tokenId representing an active subscription.\\n    mapping(uint256 tokenId => uint64 expiresAt) private _expirations;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             PUBLIC STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The minimum duration allowed for subscription renewal.\\n    uint64 public minRenewalDuration;\\n\\n    /// @notice The maximum duration allowed for subscription renewal. A value of 0 means lifetime extension is allowed.\\n    uint64 public maxRenewalDuration; // 0 value means lifetime extension\\n\\n    ///@notice The address of the collection contract that mints and manages the tokens.\\n    address public cre8orsNFT;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                MODIFIERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Modifier to check if `spender` is the owner or approved for the `tokenId`.\\n    modifier onlyApprovedOrOwner(address spender, uint256 tokenId) {\\n        if (!_isApprovedOrOwner(spender, tokenId)) {\\n            revert IERC721Drop.Access_MissingOwnerOrApproved();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if the `duration` is between `minRenewalDuration` and `maxRenewalDuration`.\\n    modifier isDurationBetweenMinAndMax(uint64 duration) {\\n        if (duration < minRenewalDuration) {\\n            revert RenewalTooShort();\\n        } else if (maxRenewalDuration != 0 && duration > maxRenewalDuration) {\\n            revert RenewalTooLong();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @dev Modifier to check if the payment for `duration` is valid.\\n    modifier isRenewalPriceValid(uint256 value, uint64 duration) {\\n        if (duration == 0) {\\n            revert DurationForRenewalPriceCannotBeZero();\\n        }\\n\\n        if (value < _getRenewalPrice(duration)) {\\n            revert InsufficientPayment();\\n        }\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Checks zero address validation\\n    /// @param cre8orsNFT_ The address of the cre8orsNFT contract.\\n    /// @param minRenewalDuration_ The minimum duration allowed for subscription renewal, can be zero.\\n    /// @param pricePerSecond_ The price per second for the subscription, can be zero.\\n    constructor(\\n        address cre8orsNFT_,\\n        uint64 minRenewalDuration_,\\n        uint256 pricePerSecond_\\n    )\\n        notZeroAddress(cre8orsNFT_)\\n        PaymentSystem(pricePerSecond_)\\n    {\\n        cre8orsNFT = cre8orsNFT_;\\n        minRenewalDuration = minRenewalDuration_;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     USER-FACING CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC5643\\n    function isRenewable(uint256 /*tokenId*/ ) external view virtual override returns (bool) {\\n        return _isRenewable();\\n    }\\n\\n    /// @inheritdoc IERC5643\\n    function expiresAt(uint256 tokenId) public view virtual override returns (uint64) {\\n        return _expirations[tokenId];\\n    }\\n\\n    /// @dev See {IERC165-supportsInterface}.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC5643).interfaceId || IERC721(cre8orsNFT).supportsInterface(interfaceId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                   USER-FACING NON-CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC5643\\n    function renewSubscription(\\n        uint256 tokenId,\\n        uint64 duration\\n    )\\n        external\\n        payable\\n        virtual\\n        override\\n        onlyApprovedOrOwner(msg.sender, tokenId)\\n        isDurationBetweenMinAndMax(duration)\\n        isRenewalPriceValid(msg.value, duration)\\n    {\\n        // extend subscription\\n        _updateSubscriptionExpiration(tokenId, duration);\\n    }\\n\\n    /// @inheritdoc IERC5643\\n    function cancelSubscription(uint256 tokenId)\\n        external\\n        payable\\n        virtual\\n        override\\n        onlyApprovedOrOwner(msg.sender, tokenId)\\n    {\\n        delete _expirations[tokenId];\\n\\n        emit SubscriptionUpdate(tokenId, 0);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    ONLY-ADMIN NON-CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Set the address of the cre8ors contract.\\n    /// @dev This function can only be called by the contract admin.\\n    /// @param target The address of the new cre8ors contract.\\n    function setCre8orsNFT(address target) external onlyAdmin(target) {\\n        cre8orsNFT = target;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                       INTERNAL CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Checks whether the subscription is renewable.\\n    /// @dev This Internal function should be implemented in derived contracts to determine if renewability should be\\n    /// disabled for all or some tokens.\\n    /// @return A boolean value indicating whether the subscription can be renewed (true) or not (false).\\n    function _isRenewable() internal view virtual returns (bool);\\n\\n    /// @notice Gets the price to renew a subscription for a specified `duration` in seconds.\\n    /// @dev This Internal function should be implemented in derived contracts to calculate the renewal price for the\\n    /// subscription.\\n    /// @param duration The duration (in seconds) for which the subscription is to be extended.\\n    /// @return The price (in native currency) required to renew the subscription for the given duration.\\n    function _getRenewalPrice(uint64 duration) internal view virtual returns (uint256);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     INTERNAL NON-CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Updates the expiration timestamp for a subscription represented by the given `tokenId`.\\n    /// @dev this function won't check that the tokenId is valid, responsibility is delegated to the caller.\\n    /// @param tokenId The unique identifier of the subscription token.\\n    /// @param duration The duration (in seconds) to extend the subscription from the current timestamp.\\n    function _updateSubscriptionExpiration(uint256 tokenId, uint64 duration) internal virtual {\\n        uint64 currentExpiration = _expirations[tokenId];\\n        uint64 newExpiration;\\n\\n        // Check if the current subscription is new or has expired\\n        if ((currentExpiration == 0) || (currentExpiration < block.timestamp)) {\\n            newExpiration = uint64(block.timestamp) + duration;\\n        } else {\\n            // If current subscription not expired (extend)\\n            if (!_isRenewable()) {\\n                revert SubscriptionNotRenewable();\\n            }\\n            newExpiration = currentExpiration + duration;\\n        }\\n\\n        _expirations[tokenId] = newExpiration;\\n\\n        emit SubscriptionUpdate(tokenId, newExpiration);\\n    }\\n\\n    /// @dev Internal function to set the minimum renewal duration.\\n    /// @param duration The new minimum renewal duration (in seconds).\\n    function _setMinimumRenewalDuration(uint64 duration) internal virtual {\\n        minRenewalDuration = duration;\\n    }\\n\\n    /// @dev Internal function to set the maximum renewal duration.\\n    /// @param duration The new maximum renewal duration (in seconds).\\n    function _setMaximumRenewalDuration(uint64 duration) internal virtual {\\n        maxRenewalDuration = duration;\\n    }\\n\\n    /// @notice Requires that spender owns or is approved for the token.\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address cre8orsNFT_ = cre8orsNFT;\\n        address owner = IERC721(cre8orsNFT_).ownerOf(tokenId);\\n        return (\\n            spender == owner || IERC721(cre8orsNFT_).isApprovedForAll(owner, spender)\\n                || IERC721(cre8orsNFT_).getApproved(tokenId) == spender\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x390cb4f13f79e2442adf37e3ec2653b6d393c6beb301f202e5ead4a6785d66ce\",\"license\":\"MIT\"},\"contracts/abstracts/PaymentSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { IPaymentSystem } from \\\"../interfaces/IPaymentSystem.sol\\\";\\nimport { Admin } from \\\"./Admin.sol\\\";\\n\\nabstract contract PaymentSystem is IPaymentSystem, Admin {\\n    /*//////////////////////////////////////////////////////////////\\n                             PUBLIC STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The price per second for the subscription in native currency.\\n    uint256 public pricePerSecond;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @param pricePerSecond_ The price per second for the subscription, can be zero.\\n    constructor(uint256 pricePerSecond_) {\\n        pricePerSecond = pricePerSecond_;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    ONLY-ADMIN NON-CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IPaymentSystem\\n    function setPricePerSecond(address target, uint256 newPrice) external override onlyAdmin(target) {\\n        pricePerSecond = newPrice;\\n        emit PricePerSecondUpdated(newPrice);\\n    }\\n\\n    /// @inheritdoc IPaymentSystem\\n    function withdraw(address target, address payable to) external override onlyAdmin(target) notZeroAddress(to) {\\n        uint256 amount = address(this).balance;\\n        if (amount == 0) revert ValueCannotBeZero();\\n\\n        (bool success,) = to.call{ value: amount }(\\\"\\\");\\n        if (!success) revert ETHTransferFailed();\\n    }\\n}\\n\",\"keccak256\":\"0x7aadcd65de05d796d199f3701ed78297b27e87d93560eb832a07b3dadb0e3c51\",\"license\":\"MIT\"},\"contracts/interfaces/IERC5643.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title IERC5643\\n/// @notice https://eips.ethereum.org/EIPS/eip-5643\\n/// @dev type(IERC5643).interfaceId should return 0x8c65f84d\\ninterface IERC5643 {\\n    /*//////////////////////////////////////////////////////////////\\n                             ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The duration provided for renewal is too short to extend the subscription.\\n    error RenewalTooShort();\\n\\n    /// @notice The duration provided for renewal exceeds the allowed maximum for subscription extension.\\n    error RenewalTooLong();\\n\\n    /// @notice The payment received for the subscription renewal is insufficient.\\n    error InsufficientPayment();\\n\\n    /// @notice The subscription associated with the token is not renewable and cannot be extended.\\n    error SubscriptionNotRenewable();\\n\\n    /// @notice The duration provided for renewal price calculation cannot be zero.\\n    error DurationForRenewalPriceCannotBeZero();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted when a subscription expiration changes\\n    /// @dev When a subscription is canceled, the expiration value should also be 0.\\n    event SubscriptionUpdate(uint256 indexed tokenId, uint64 expiration);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Gets the expiration date of a subscription\\n    /// @dev Throws if `tokenId` is not a valid NFT\\n    /// @param tokenId The NFT to get the expiration date of\\n    /// @return The expiration date of the subscription\\n    function expiresAt(uint256 tokenId) external view returns (uint64);\\n\\n    /// @notice Determines whether a subscription can be renewed\\n    /// @dev Throws if `tokenId` is not a valid NFT\\n    /// @param tokenId The NFT to get the expiration date of\\n    /// @return The renewability of a the subscription\\n    function isRenewable(uint256 tokenId) external view returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         NON-CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Renews the subscription to an NFT\\n    /// Throws if `tokenId` is not a valid NFT\\n    /// @param tokenId The NFT to renew the subscription for\\n    /// @param duration The number of seconds to extend a subscription for\\n    function renewSubscription(uint256 tokenId, uint64 duration) external payable;\\n\\n    /// @notice Cancels the subscription of an NFT\\n    /// @dev Throws if `tokenId` is not a valid NFT\\n    /// @param tokenId The NFT to cancel the subscription for\\n    function cancelSubscription(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x75aa3325e87aa926f81e156f302940e27bd297e5c1708c92d64007f3f5211b40\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Payment System Interface\\n/// @notice An interface for the PaymentSystem contract.\\ninterface IPaymentSystem {\\n    /// @notice Error message for zero value.\\n    error ValueCannotBeZero();\\n\\n    /// @notice Error message for failed ETH transfer.\\n    error ETHTransferFailed();\\n\\n    /// @dev Emitted when the native currency price is updated.\\n    /// @param newPrice The new price per second of the native currency.\\n    event PricePerSecondUpdated(uint256 newPrice);\\n\\n    /// @notice Sets the price per second of the native currency.\\n    /// @param target The address of the contract implementing the access control.\\n    /// @param newPrice The new price per second to be set.\\n    function setPricePerSecond(address target, uint256 newPrice) external;\\n\\n    /// @notice Withdraws the native currency from the contract to the specified address.\\n    /// @param target The address of the contract implementing the access control.\\n    /// @param to The address to which the native currency should be withdrawn.\\n    function withdraw(address target, address payable to) external;\\n}\\n\",\"keccak256\":\"0x45ff49b1831557194bd2903a4db5d6d7a45fdebd9ca87a8481ef87d4f099734d\",\"license\":\"MIT\"},\"contracts/interfaces/ISubscription.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title ISubscription\\n/// @dev Interface for managing subscriptions to NFTs.\\ninterface ISubscription {\\n    /*//////////////////////////////////////////////////////////////\\n                                 ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The subscription associated with the provided token ID is invalid or has expired.\\n    error InvalidSubscription();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Emitted when the renewability status of subscriptions is updated.\\n    event RenewableUpdate(bool renewable);\\n\\n    /// @dev Emitted when the minimum duration for subscription renewal is updated.\\n    event MinRenewalDurationUpdate(uint64 duration);\\n\\n    /// @dev Emitted when the maximum duration for subscription renewal is updated.\\n    event MaxRenewalDurationUpdate(uint64 duration);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Checks the subscription for the given `tokenId`.\\n    /// Throws if `tokenId` subscription has expired.\\n    /// @param tokenId The unique identifier of the NFT token.\\n    function checkSubscription(uint256 tokenId) external view;\\n\\n    /// @notice Returns whether the subscription for the given `tokenId` is valid.\\n    /// @param tokenId The unique identifier of the NFT token.\\n    /// @return A boolean indicating if the subscription is valid.\\n    function isSubscriptionValid(uint256 tokenId) external view returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         NON-CONSTANT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /*//////////   updateSubscriptionForFree variants   //////////*/\\n\\n    /// @notice Extends the subscription for the given `tokenId` with a specified `duration` for free.\\n    /// @dev This function is meant to be called by the minter when minting the NFT to subscribe.\\n    /// @param target The address of the contract implementing the access control\\n    /// @param duration The duration (in seconds) to extend the subscription for.\\n    /// @param tokenId The unique identifier of the NFT token to be subscribed.\\n    function updateSubscriptionForFree(address target, uint64 duration, uint256 tokenId) external;\\n\\n    /// @notice Extends the subscription for the given `tokenIds` with a specified `duration` for free.\\n    /// @dev This function is meant to be called by the minter when minting the NFT to subscribe.\\n    /// @param target The address of the contract implementing the access control\\n    /// @param duration The duration (in seconds) to extend the subscription for.\\n    /// @param tokenIds An array of unique identifiers of the NFT tokens to update the subscriptions for.\\n    function updateSubscriptionForFree(address target, uint64 duration, uint256[] calldata tokenIds) external;\\n\\n    /*//////////////   updateSubscription variants   /////////////*/\\n\\n    /// @notice Extends the subscription for the given `tokenId` with a specified `duration`, using native currency as\\n    /// payment.\\n    /// @dev This function is meant to be called by the minter when minting the NFT to subscribe.\\n    /// @param target The address of the contract implementing the access control\\n    /// @param duration The duration (in seconds) to extend the subscription for.\\n    /// @param tokenId The unique identifier of the NFT token to be subscribed.\\n    function updateSubscription(address target, uint64 duration, uint256 tokenId) external payable;\\n\\n    /// @notice Extends the subscription for the given `tokenIds` with a specified `duration`, using native currency as\\n    /// payment.\\n    /// @dev This function is meant to be called by the minter when minting the NFT to subscribe.\\n    /// @param target The address of the contract implementing the access control\\n    /// @param duration The duration (in seconds) to extend the subscription for.\\n    /// @param tokenIds An array of unique identifiers of the NFT tokens to update the subscriptions for.\\n    function updateSubscription(address target, uint64 duration, uint256[] calldata tokenIds) external payable;\\n}\\n\",\"keccak256\":\"0x82c9c990a098c7c5ef940b7b735de23384a7525c92e811973226e40d46858851\",\"license\":\"MIT\"},\"lib/CR8ORS_DROP_CONTRACT/src/interfaces/IERC721Drop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport {IMetadataRenderer} from \\\"../interfaces/IMetadataRenderer.sol\\\";\\n\\n/**\\n \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d                                                       \\n*/\\n/// @notice Interface for Cre8ors Drop contract\\ninterface IERC721Drop {\\n    // Access errors\\n\\n    /// @notice Only admin can access this function\\n    error Access_OnlyAdmin();\\n    /// @notice Missing the given role or admin access\\n    error Access_MissingRoleOrAdmin(bytes32 role);\\n    /// @notice Withdraw is not allowed by this user\\n    error Access_WithdrawNotAllowed();\\n    /// @notice Cannot withdraw funds due to ETH send failure.\\n    error Withdraw_FundsSendFailure();\\n    /// @notice Missing the owner role.\\n    error Access_OnlyOwner();\\n    /// @notice Missing the owner role or approved nft access.\\n    error Access_MissingOwnerOrApproved();\\n\\n    // Sale/Purchase errors\\n    /// @notice Sale is inactive\\n    error Sale_Inactive();\\n    /// @notice Presale is inactive\\n    error Presale_Inactive();\\n    /// @notice Presale merkle root is invalid\\n    error Presale_MerkleNotApproved();\\n    /// @notice Wrong price for purchase\\n    error Purchase_WrongPrice(uint256 correctPrice);\\n    /// @notice NFT sold out\\n    error Mint_SoldOut();\\n    /// @notice Too many purchase for address\\n    error Purchase_TooManyForAddress();\\n    /// @notice Too many presale for address\\n    error Presale_TooManyForAddress();\\n\\n    // Admin errors\\n    /// @notice Royalty percentage too high\\n    error Setup_RoyaltyPercentageTooHigh(uint16 maxRoyaltyBPS);\\n    /// @notice Invalid admin upgrade address\\n    error Admin_InvalidUpgradeAddress(address proposedAddress);\\n    /// @notice Unable to finalize an edition not marked as open (size set to uint64_max_value)\\n    error Admin_UnableToFinalizeNotOpenEdition();\\n\\n    /// @notice Event emitted for each sale\\n    /// @param to address sale was made to\\n    /// @param quantity quantity of the minted nfts\\n    /// @param pricePerToken price for each token\\n    /// @param firstPurchasedTokenId first purchased token ID (to get range add to quantity for max)\\n    event Sale(\\n        address indexed to,\\n        uint256 indexed quantity,\\n        uint256 indexed pricePerToken,\\n        uint256 firstPurchasedTokenId\\n    );\\n\\n    /// @notice Sales configuration has been changed\\n    /// @dev To access new sales configuration, use getter function.\\n    /// @param changedBy Changed by user\\n    event SalesConfigChanged(address indexed changedBy);\\n\\n    /// @notice Event emitted when the funds recipient is changed\\n    /// @param newAddress new address for the funds recipient\\n    /// @param changedBy address that the recipient is changed by\\n    event FundsRecipientChanged(\\n        address indexed newAddress,\\n        address indexed changedBy\\n    );\\n\\n    /// @notice Event emitted when the funds are withdrawn from the minting contract\\n    /// @param withdrawnBy address that issued the withdraw\\n    /// @param withdrawnTo address that the funds were withdrawn to\\n    /// @param amount amount that was withdrawn\\n    event FundsWithdrawn(\\n        address indexed withdrawnBy,\\n        address indexed withdrawnTo,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when an open mint is finalized and further minting is closed forever on the contract.\\n    /// @param sender address sending close mint\\n    /// @param numberOfMints number of mints the contract is finalized at\\n    event OpenMintFinalized(address indexed sender, uint256 numberOfMints);\\n\\n    /// @notice Event emitted when metadata renderer is updated.\\n    /// @param sender address of the updater\\n    /// @param renderer new metadata renderer address\\n    event UpdatedMetadataRenderer(address sender, IMetadataRenderer renderer);\\n\\n    /// @notice General configuration for NFT Minting and bookkeeping\\n    struct Configuration {\\n        /// @dev Metadata renderer (uint160)\\n        IMetadataRenderer metadataRenderer;\\n        /// @dev Total size of edition that can be minted (uint160+64 = 224)\\n        uint64 editionSize;\\n        /// @dev Royalty amount in bps (uint224+16 = 240)\\n        uint16 royaltyBPS;\\n        /// @dev Funds recipient for sale (new slot, uint160)\\n        address payable fundsRecipient;\\n    }\\n\\n    /// @notice Sales states and configuration\\n    /// @dev Uses 3 storage slots\\n    struct SalesConfiguration {\\n        /// @dev Public sale price (max ether value > 1000 ether with this value)\\n        uint104 publicSalePrice;\\n        /// @dev ERC20 Token\\n        address erc20PaymentToken;\\n        /// @notice Purchase mint limit per address (if set to 0 === unlimited mints)\\n        /// @dev Max purchase number per txn (90+32 = 122)\\n        uint32 maxSalePurchasePerAddress;\\n        /// @dev uint64 type allows for dates into 292 billion years\\n        /// @notice Public sale start timestamp (136+64 = 186)\\n        uint64 publicSaleStart;\\n        /// @notice Public sale end timestamp (186+64 = 250)\\n        uint64 publicSaleEnd;\\n        /// @notice Presale start timestamp\\n        /// @dev new storage slot\\n        uint64 presaleStart;\\n        /// @notice Presale end timestamp\\n        uint64 presaleEnd;\\n        /// @notice Presale merkle root\\n        bytes32 presaleMerkleRoot;\\n    }\\n\\n    /// @notice CRE8ORS - General configuration for Builder Rewards burn requirements\\n    struct BurnConfiguration {\\n        /// @dev Token to burn\\n        address burnToken;\\n        /// @dev Required number of tokens to burn\\n        uint256 burnQuantity;\\n    }\\n\\n    /// @notice Sales states and configuration\\n    /// @dev Uses 3 storage slots\\n    struct ERC20SalesConfiguration {\\n        /// @notice Public sale price\\n        /// @dev max ether value > 1000 ether with this value\\n        uint104 publicSalePrice;\\n        /// @dev ERC20 Token\\n        address erc20PaymentToken;\\n        /// @notice Purchase mint limit per address (if set to 0 === unlimited mints)\\n        /// @dev Max purchase number per txn (90+32 = 122)\\n        uint32 maxSalePurchasePerAddress;\\n        /// @dev uint64 type allows for dates into 292 billion years\\n        /// @notice Public sale start timestamp (136+64 = 186)\\n        uint64 publicSaleStart;\\n        /// @notice Public sale end timestamp (186+64 = 250)\\n        uint64 publicSaleEnd;\\n        /// @notice Presale start timestamp\\n        /// @dev new storage slot\\n        uint64 presaleStart;\\n        /// @notice Presale end timestamp\\n        uint64 presaleEnd;\\n        /// @notice Presale merkle root\\n        bytes32 presaleMerkleRoot;\\n    }\\n\\n    /// @notice Return value for sales details to use with front-ends\\n    struct SaleDetails {\\n        // Synthesized status variables for sale and presale\\n        bool publicSaleActive;\\n        bool presaleActive;\\n        // Price for public sale\\n        uint256 publicSalePrice;\\n        // Timed sale actions for public sale\\n        uint64 publicSaleStart;\\n        uint64 publicSaleEnd;\\n        // Timed sale actions for presale\\n        uint64 presaleStart;\\n        uint64 presaleEnd;\\n        // Merkle root (includes address, quantity, and price data for each entry)\\n        bytes32 presaleMerkleRoot;\\n        // Limit public sale to a specific number of mints per wallet\\n        uint256 maxSalePurchasePerAddress;\\n        // Information about the rest of the supply\\n        // Total that have been minted\\n        uint256 totalMinted;\\n        // The total supply available\\n        uint256 maxSupply;\\n    }\\n\\n    /// @notice Return value for sales details to use with front-ends\\n    struct ERC20SaleDetails {\\n        /// @notice Synthesized status variables for sale\\n        bool publicSaleActive;\\n        /// @notice Synthesized status variables for presale\\n        bool presaleActive;\\n        /// @notice Price for public sale\\n        uint256 publicSalePrice;\\n        /// @notice ERC20 contract address for payment. address(0) for ETH.\\n        address erc20PaymentToken;\\n        /// @notice public sale start\\n        uint64 publicSaleStart;\\n        /// @notice public sale end\\n        uint64 publicSaleEnd;\\n        /// @notice Timed sale actions for presale start\\n        uint64 presaleStart;\\n        /// @notice Timed sale actions for presale end\\n        uint64 presaleEnd;\\n        /// @notice Merkle root (includes address, quantity, and price data for each entry)\\n        bytes32 presaleMerkleRoot;\\n        /// @notice Limit public sale to a specific number of mints per wallet\\n        uint256 maxSalePurchasePerAddress;\\n        /// @notice Total that have been minted\\n        uint256 totalMinted;\\n        /// @notice The total supply available\\n        uint256 maxSupply;\\n    }\\n\\n    /// @notice Return type of specific mint counts and details per address\\n    struct AddressMintDetails {\\n        /// Number of total mints from the given address\\n        uint256 totalMints;\\n        /// Number of presale mints from the given address\\n        uint256 presaleMints;\\n        /// Number of public mints from the given address\\n        uint256 publicMints;\\n    }\\n\\n    /// @notice External purchase function (payable in eth)\\n    /// @param quantity to purchase\\n    /// @return first minted token ID\\n    function purchase(uint256 quantity) external payable returns (uint256);\\n\\n    /// @notice External purchase presale function (takes a merkle proof and matches to root) (payable in eth)\\n    /// @param quantity to purchase\\n    /// @param maxQuantity can purchase (verified by merkle root)\\n    /// @param pricePerToken price per token allowed (verified by merkle root)\\n    /// @param merkleProof input for merkle proof leaf verified by merkle root\\n    /// @return first minted token ID\\n    function purchasePresale(\\n        uint256 quantity,\\n        uint256 maxQuantity,\\n        uint256 pricePerToken,\\n        bytes32[] memory merkleProof\\n    ) external payable returns (uint256);\\n\\n    /// @notice Function to return the global sales details for the given drop\\n    function saleDetails() external view returns (ERC20SaleDetails memory);\\n\\n    /// @notice Function to return the specific sales details for a given address\\n    /// @param minter address for minter to return mint information for\\n    function mintedPerAddress(\\n        address minter\\n    ) external view returns (AddressMintDetails memory);\\n\\n    /// @notice This is the opensea/public owner setting that can be set by the contract admin\\n    function owner() external view returns (address);\\n\\n    /// @notice Update the metadata renderer\\n    /// @param newRenderer new address for renderer\\n    /// @param setupRenderer data to call to bootstrap data for the new renderer (optional)\\n    function setMetadataRenderer(\\n        IMetadataRenderer newRenderer,\\n        bytes memory setupRenderer\\n    ) external;\\n\\n    /// @notice This is an admin mint function to mint a quantity to a specific address\\n    /// @param to address to mint to\\n    /// @param quantity quantity to mint\\n    /// @return the id of the first minted NFT\\n    function adminMint(address to, uint256 quantity) external returns (uint256);\\n\\n    /// @notice This is an admin mint function to mint a single nft each to a list of addresses\\n    /// @param to list of addresses to mint an NFT each to\\n    /// @return the id of the first minted NFT\\n    function adminMintAirdrop(address[] memory to) external returns (uint256);\\n\\n    /// @dev Getter for admin role associated with the contract to handle metadata\\n    /// @return boolean if address is admin\\n    function isAdmin(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x24b487848f3311cb1d9e2c8aaa6ed09b3b60e8b7cf48d04928ecf053c5987a2a\",\"license\":\"MIT\"},\"lib/CR8ORS_DROP_CONTRACT/src/interfaces/IMetadataRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\n/**\\n \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d                                                     \\n */\\n\\n/// @dev credit: https://github.com/ourzora/zora-drops-contracts\\ninterface IMetadataRenderer {\\n    function tokenURI(uint256) external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function initializeWithData(bytes memory initData) external;\\n}\\n\",\"keccak256\":\"0x7d0928ed3ba0751dc51df125642a7f97dd3e1b949918b9b74898775b656abf9c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c806363d20de7116100b6578063bab4dd461161006f578063bab4dd46146103c0578063cde317af146103e0578063d539139314610400578063d5dca19f14610422578063f3b8f66314610435578063f940e3851461045557600080fd5b806363d20de7146102f3578063776ce868146103135780639100674514610326578063954689ca14610346578063a8fef4a714610380578063b4695d8c146103a057600080fd5b806317c957091161010857806317c957091461020e578063212350831461024457806332fb5c48146102575780633804fd1f1461028f5780634073377c146102b357806357064afe146102d357600080fd5b806301ffc9a71461014557806304394ed91461017a578063090db0291461018f578063147e9782146101ce578063176f7d7c146101ee575b600080fd5b34801561015157600080fd5b5061016561016036600461135b565b610475565b60405190151581526020015b60405180910390f35b61018d6101883660046113b9565b61050d565b005b34801561019b57600080fd5b506002546101b690600160401b90046001600160401b031681565b6040516001600160401b039091168152602001610171565b3480156101da57600080fd5b506002546101b6906001600160401b031681565b3480156101fa57600080fd5b5061018d61020936600461144b565b6106f9565b34801561021a57600080fd5b506101b6610229366004611480565b6000908152600160205260409020546001600160401b031690565b61018d610252366004611480565b61078d565b34801561026357600080fd5b50600354610277906001600160a01b031681565b6040516001600160a01b039091168152602001610171565b34801561029b57600080fd5b506102a560005481565b604051908152602001610171565b3480156102bf57600080fd5b5061018d6102ce36600461144b565b61080c565b3480156102df57600080fd5b5061018d6102ee366004611499565b610889565b3480156102ff57600080fd5b5061018d61030e3660046114c5565b6108e6565b61018d610321366004611503565b610a32565b34801561033257600080fd5b50610165610341366004611526565b610b49565b34801561035257600080fd5b50610165610361366004611480565b600090815260016020526040902054426001600160401b039091161190565b34801561038c57600080fd5b5061018d61039b366004611480565b610bbe565b3480156103ac57600080fd5b5061018d6103bb3660046113b9565b610bfc565b3480156103cc57600080fd5b5061018d6103db36600461155f565b610d7a565b3480156103ec57600080fd5b506101656103fb366004611480565b610dc5565b34801561040c57600080fd5b506102a560008051602061165d83398151915281565b61018d6104303660046114c5565b610dda565b34801561044157600080fd5b5061018d61045036600461158a565b610f7d565b34801561046157600080fd5b5061018d610470366004611526565b610ff2565b60006001600160e01b03198216638c65f84d60e01b148061050757506003546040516301ffc9a760e01b81526001600160e01b0319841660048201526001600160a01b03909116906301ffc9a790602401602060405180830381865afa1580156104e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050791906115b8565b92915050565b8360008051602061165d8339815191526105278233610b49565b1580156105a05750604051632474521560e21b8152600481018290523360248201526001600160a01b038316906391d1485490604401602060405180830381865afa15801561057a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059e91906115b8565b155b156105c6576040516333ba055f60e21b8152600481018290526024015b60405180910390fd5b60025485906001600160401b0390811690821610156105f85760405163e3061ca960e01b815260040160405180910390fd5b600254600160401b90046001600160401b03161580159061062e57506002546001600160401b03600160401b9091048116908216115b1561064c57604051633b44021f60e01b815260040160405180910390fd5b346106606001600160401b038816866115eb565b806001600160401b031660000361068a57604051634beba9c560e01b815260040160405180910390fd5b610693816110d9565b8210156106b35760405163cd1c886760e01b815260040160405180910390fd5b6000805b878110156106ec578888828181106106d1576106d1611602565b9050602002013591506106e4828b6110f0565b6001016106b7565b5050505050505050505050565b816107048133610b49565b610721576040516302bd6bd160e01b815260040160405180910390fd5b600280546fffffffffffffffff00000000000000001916600160401b6001600160401b038516021790556040516001600160401b03831681527f7184449cafc5778c3392f4611de8de52280e7534422b8afbed32112693a8e21b906020015b60405180910390a1505050565b338161079982826111d2565b6107b657604051632a60827160e21b815260040160405180910390fd5b6000838152600160209081526040808320805467ffffffffffffffff191690555191825284917f2ec2be2c4b90c2cf13ecb6751a24daed6bb741ae5ed3f7371aabf9402f6d62e8910160405180910390a2505050565b816108178133610b49565b610834576040516302bd6bd160e01b815260040160405180910390fd5b6002805467ffffffffffffffff19166001600160401b0384161790556040516001600160401b03831681527f62b10fb74dcc07849919c457af8ebac640f6df11273f29e798abe1c43ae5825790602001610780565b816108948133610b49565b6108b1576040516302bd6bd160e01b815260040160405180910390fd5b60008290556040518281527f9bb66cb13f624f691aedcc04a2be58c5c1d73cf9d41593070f0ff9d4f9e410b390602001610780565b8260008051602061165d8339815191526109008233610b49565b1580156109795750604051632474521560e21b8152600481018290523360248201526001600160a01b038316906391d1485490604401602060405180830381865afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097791906115b8565b155b1561099a576040516333ba055f60e21b8152600481018290526024016105bd565b60025484906001600160401b0390811690821610156109cc5760405163e3061ca960e01b815260040160405180910390fd5b600254600160401b90046001600160401b031615801590610a0257506002546001600160401b03600160401b9091048116908216115b15610a2057604051633b44021f60e01b815260040160405180910390fd5b610a2a84866110f0565b505050505050565b3382610a3e82826111d2565b610a5b57604051632a60827160e21b815260040160405180910390fd5b60025483906001600160401b039081169082161015610a8d5760405163e3061ca960e01b815260040160405180910390fd5b600254600160401b90046001600160401b031615801590610ac357506002546001600160401b03600160401b9091048116908216115b15610ae157604051633b44021f60e01b815260040160405180910390fd5b3484806001600160401b0316600003610b0d57604051634beba9c560e01b815260040160405180910390fd5b610b16816110d9565b821015610b365760405163cd1c886760e01b815260040160405180910390fd5b610b4087876110f0565b50505050505050565b604051630935e01b60e21b81526001600160a01b038281166004830152600091908416906324d7806c90602401602060405180830381865afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb791906115b8565b9392505050565b600081815260016020526040902054426001600160401b039091161180610bf857604051630fb532db60e11b815260040160405180910390fd5b5050565b8360008051602061165d833981519152610c168233610b49565b158015610c8f5750604051632474521560e21b8152600481018290523360248201526001600160a01b038316906391d1485490604401602060405180830381865afa158015610c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8d91906115b8565b155b15610cb0576040516333ba055f60e21b8152600481018290526024016105bd565b60025485906001600160401b039081169082161015610ce25760405163e3061ca960e01b815260040160405180910390fd5b600254600160401b90046001600160401b031615801590610d1857506002546001600160401b03600160401b9091048116908216115b15610d3657604051633b44021f60e01b815260040160405180910390fd5b6000805b85811015610d6f57868682818110610d5457610d54611602565b905060200201359150610d6782896110f0565b600101610d3a565b505050505050505050565b80610d858133610b49565b610da2576040516302bd6bd160e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b600354600090600160a01b900460ff16610507565b8260008051602061165d833981519152610df48233610b49565b158015610e6d5750604051632474521560e21b8152600481018290523360248201526001600160a01b038316906391d1485490604401602060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b91906115b8565b155b15610e8e576040516333ba055f60e21b8152600481018290526024016105bd565b60025484906001600160401b039081169082161015610ec05760405163e3061ca960e01b815260040160405180910390fd5b600254600160401b90046001600160401b031615801590610ef657506002546001600160401b03600160401b9091048116908216115b15610f1457604051633b44021f60e01b815260040160405180910390fd5b3485806001600160401b0316600003610f4057604051634beba9c560e01b815260040160405180910390fd5b610f49816110d9565b821015610f695760405163cd1c886760e01b815260040160405180910390fd5b610f7386886110f0565b5050505050505050565b81610f888133610b49565b610fa5576040516302bd6bd160e01b815260040160405180910390fd5b60038054831515600160a01b0260ff60a01b199091161790556040517f24ec1c131fb5947a129795cb5f89b24f524bd817e733843a630d641b681dfb369061078090841515815260200190565b81610ffd8133610b49565b61101a576040516302bd6bd160e01b815260040160405180910390fd5b816001600160a01b038116611042576040516303988b8160e61b815260040160405180910390fd5b476000819003611065576040516363868c5560e11b815260040160405180910390fd5b6000846001600160a01b03168260405160006040518083038185875af1925050503d80600081146110b2576040519150601f19603f3d011682016040523d82523d6000602084013e6110b7565b606091505b5050905080610a2a5760405163b12d13eb60e01b815260040160405180910390fd5b60008054610507906001600160401b0384166115eb565b6000828152600160205260408120546001600160401b03169081158061111e575042826001600160401b0316105b156111345761112d8342611618565b905061116b565b600354600160a01b900460ff1661115e57604051638b9bff4560e01b815260040160405180910390fd5b6111688383611618565b90505b600084815260016020908152604091829020805467ffffffffffffffff19166001600160401b038516908117909155915191825285917f2ec2be2c4b90c2cf13ecb6751a24daed6bb741ae5ed3f7371aabf9402f6d62e8910160405180910390a250505050565b6003546040516331a9108f60e11b8152600481018390526000916001600160a01b03169082908290636352211e90602401602060405180830381865afa158015611220573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611244919061163f565b9050806001600160a01b0316856001600160a01b031614806112d3575060405163e985e9c560e01b81526001600160a01b038281166004830152868116602483015283169063e985e9c590604401602060405180830381865afa1580156112af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d391906115b8565b80611352575060405163020604bf60e21b8152600481018590526001600160a01b03808716919084169063081812fc90602401602060405180830381865afa158015611323573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611347919061163f565b6001600160a01b0316145b95945050505050565b60006020828403121561136d57600080fd5b81356001600160e01b031981168114610bb757600080fd5b6001600160a01b038116811461139a57600080fd5b50565b80356001600160401b03811681146113b457600080fd5b919050565b600080600080606085870312156113cf57600080fd5b84356113da81611385565b93506113e86020860161139d565b925060408501356001600160401b038082111561140457600080fd5b818701915087601f83011261141857600080fd5b81358181111561142757600080fd5b8860208260051b850101111561143c57600080fd5b95989497505060200194505050565b6000806040838503121561145e57600080fd5b823561146981611385565b91506114776020840161139d565b90509250929050565b60006020828403121561149257600080fd5b5035919050565b600080604083850312156114ac57600080fd5b82356114b781611385565b946020939093013593505050565b6000806000606084860312156114da57600080fd5b83356114e581611385565b92506114f36020850161139d565b9150604084013590509250925092565b6000806040838503121561151657600080fd5b823591506114776020840161139d565b6000806040838503121561153957600080fd5b823561154481611385565b9150602083013561155481611385565b809150509250929050565b60006020828403121561157157600080fd5b8135610bb781611385565b801515811461139a57600080fd5b6000806040838503121561159d57600080fd5b82356115a881611385565b915060208301356115548161157c565b6000602082840312156115ca57600080fd5b8151610bb78161157c565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610507576105076115d5565b634e487b7160e01b600052603260045260246000fd5b6001600160401b03818116838216019080821115611638576116386115d5565b5092915050565b60006020828403121561165157600080fd5b8151610bb78161138556fef0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9a164736f6c6343000813000a",
  "devdoc": {
    "events": {
      "MaxRenewalDurationUpdate(uint64)": {
        "details": "Emitted when the maximum duration for subscription renewal is updated."
      },
      "MinRenewalDurationUpdate(uint64)": {
        "details": "Emitted when the minimum duration for subscription renewal is updated."
      },
      "PricePerSecondUpdated(uint256)": {
        "details": "Emitted when the native currency price is updated.",
        "params": {
          "newPrice": "The new price per second of the native currency."
        }
      },
      "RenewableUpdate(bool)": {
        "details": "Emitted when the renewability status of subscriptions is updated."
      },
      "SubscriptionUpdate(uint256,uint64)": {
        "details": "When a subscription is canceled, the expiration value should also be 0."
      }
    },
    "kind": "dev",
    "methods": {
      "cancelSubscription(uint256)": {
        "details": "Throws if `tokenId` is not a valid NFT",
        "params": {
          "tokenId": "The NFT to cancel the subscription for"
        }
      },
      "checkSubscription(uint256)": {
        "params": {
          "tokenId": "The unique identifier of the NFT token."
        }
      },
      "constructor": {
        "params": {
          "cre8orsNFT_": "The address of the cre8orsNFT contract.",
          "minRenewalDuration_": "The minimum duration allowed for subscription renewal, can be zero.",
          "pricePerSecond_": "The price per second for the subscription, can be zero."
        }
      },
      "expiresAt(uint256)": {
        "details": "Throws if `tokenId` is not a valid NFT",
        "params": {
          "tokenId": "The NFT to get the expiration date of"
        },
        "returns": {
          "_0": "The expiration date of the subscription"
        }
      },
      "isAdmin(address,address)": {
        "params": {
          "target": "The address of the contract implementing the access control",
          "user": "The address to check for admin access"
        },
        "returns": {
          "_0": "Whether the address has admin access or not"
        }
      },
      "isRenewable(uint256)": {
        "details": "Throws if `tokenId` is not a valid NFT",
        "params": {
          "tokenId": "The NFT to get the expiration date of"
        },
        "returns": {
          "_0": "The renewability of a the subscription"
        }
      },
      "isSubscriptionValid(uint256)": {
        "params": {
          "tokenId": "The unique identifier of the NFT token."
        },
        "returns": {
          "_0": "A boolean indicating if the subscription is valid."
        }
      },
      "renewSubscription(uint256,uint64)": {
        "params": {
          "duration": "The number of seconds to extend a subscription for",
          "tokenId": "The NFT to renew the subscription for"
        }
      },
      "setCre8orsNFT(address)": {
        "details": "This function can only be called by the contract admin.",
        "params": {
          "target": "The address of the new cre8ors contract."
        }
      },
      "setMaxRenewalDuration(address,uint64)": {
        "details": "This function can only be called by the admin.",
        "params": {
          "duration": "The maximum duration (in seconds) for subscription renewal."
        }
      },
      "setMinRenewalDuration(address,uint64)": {
        "details": "This function can only be called by the admin.",
        "params": {
          "duration": "The minimum duration (in seconds) for subscription renewal."
        }
      },
      "setPricePerSecond(address,uint256)": {
        "params": {
          "newPrice": "The new price per second to be set.",
          "target": "The address of the contract implementing the access control."
        }
      },
      "setRenewable(address,bool)": {
        "details": "This function can only be called by the admin.",
        "params": {
          "renewable": "Boolean flag to indicate if subscriptions are renewable."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateSubscription(address,uint64,uint256)": {
        "details": "This function is meant to be called by the minter when minting the NFT to subscribe.",
        "params": {
          "duration": "The duration (in seconds) to extend the subscription for.",
          "target": "The address of the contract implementing the access control",
          "tokenId": "The unique identifier of the NFT token to be subscribed."
        }
      },
      "updateSubscription(address,uint64,uint256[])": {
        "details": "No need to check for `tokenIds.length` as `isRenewalPriceValid` checks duration to not be zero.",
        "params": {
          "duration": "The duration (in seconds) to extend the subscription for.",
          "target": "The address of the contract implementing the access control",
          "tokenIds": "An array of unique identifiers of the NFT tokens to update the subscriptions for."
        }
      },
      "updateSubscriptionForFree(address,uint64,uint256)": {
        "details": "This function is meant to be called by the minter when minting the NFT to subscribe.",
        "params": {
          "duration": "The duration (in seconds) to extend the subscription for.",
          "target": "The address of the contract implementing the access control",
          "tokenId": "The unique identifier of the NFT token to be subscribed."
        }
      },
      "updateSubscriptionForFree(address,uint64,uint256[])": {
        "details": "This function is meant to be called by the minter when minting the NFT to subscribe.",
        "params": {
          "duration": "The duration (in seconds) to extend the subscription for.",
          "target": "The address of the contract implementing the access control",
          "tokenIds": "An array of unique identifiers of the NFT tokens to update the subscriptions for."
        }
      },
      "withdraw(address,address)": {
        "params": {
          "target": "The address of the contract implementing the access control.",
          "to": "The address to which the native currency should be withdrawn."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Access_MissingOwnerOrApproved()": [
        {
          "notice": "Missing the owner role or approved nft access."
        }
      ],
      "Access_MissingRoleOrAdmin(bytes32)": [
        {
          "notice": "Missing the given role or admin access"
        }
      ],
      "Access_OnlyAdmin()": [
        {
          "notice": "Only admin can access this function"
        }
      ],
      "AddressCannotBeZero()": [
        {
          "notice": "given address is invalid."
        }
      ],
      "DurationForRenewalPriceCannotBeZero()": [
        {
          "notice": "The duration provided for renewal price calculation cannot be zero."
        }
      ],
      "ETHTransferFailed()": [
        {
          "notice": "Error message for failed ETH transfer."
        }
      ],
      "InsufficientPayment()": [
        {
          "notice": "The payment received for the subscription renewal is insufficient."
        }
      ],
      "InvalidSubscription()": [
        {
          "notice": "The subscription associated with the provided token ID is invalid or has expired."
        }
      ],
      "RenewalTooLong()": [
        {
          "notice": "The duration provided for renewal exceeds the allowed maximum for subscription extension."
        }
      ],
      "RenewalTooShort()": [
        {
          "notice": "The duration provided for renewal is too short to extend the subscription."
        }
      ],
      "SubscriptionNotRenewable()": [
        {
          "notice": "The subscription associated with the token is not renewable and cannot be extended."
        }
      ],
      "ValueCannotBeZero()": [
        {
          "notice": "Error message for zero value."
        }
      ]
    },
    "events": {
      "SubscriptionUpdate(uint256,uint64)": {
        "notice": "Emitted when a subscription expiration changes"
      }
    },
    "kind": "user",
    "methods": {
      "MINTER_ROLE()": {
        "notice": "Access control roles"
      },
      "cancelSubscription(uint256)": {
        "notice": "Cancels the subscription of an NFT"
      },
      "checkSubscription(uint256)": {
        "notice": "Checks the subscription for the given `tokenId`. Throws if `tokenId` subscription has expired."
      },
      "cre8orsNFT()": {
        "notice": "The address of the collection contract that mints and manages the tokens."
      },
      "expiresAt(uint256)": {
        "notice": "Gets the expiration date of a subscription"
      },
      "isAdmin(address,address)": {
        "notice": "Getter for admin role associated with the contract to handle minting"
      },
      "isRenewable(uint256)": {
        "notice": "Determines whether a subscription can be renewed"
      },
      "isSubscriptionValid(uint256)": {
        "notice": "Returns whether the subscription for the given `tokenId` is valid."
      },
      "maxRenewalDuration()": {
        "notice": "The maximum duration allowed for subscription renewal. A value of 0 means lifetime extension is allowed."
      },
      "minRenewalDuration()": {
        "notice": "The minimum duration allowed for subscription renewal."
      },
      "pricePerSecond()": {
        "notice": "The price per second for the subscription in native currency."
      },
      "renewSubscription(uint256,uint64)": {
        "notice": "Renews the subscription to an NFT Throws if `tokenId` is not a valid NFT"
      },
      "setCre8orsNFT(address)": {
        "notice": "Set the address of the cre8ors contract."
      },
      "setMaxRenewalDuration(address,uint64)": {
        "notice": "Sets the maximum duration for subscription renewal."
      },
      "setMinRenewalDuration(address,uint64)": {
        "notice": "Sets the minimum duration for subscription renewal."
      },
      "setPricePerSecond(address,uint256)": {
        "notice": "Sets the price per second of the native currency."
      },
      "setRenewable(address,bool)": {
        "notice": "Sets the renewability status of subscriptions."
      },
      "updateSubscription(address,uint64,uint256)": {
        "notice": "Extends the subscription for the given `tokenId` with a specified `duration`, using native currency as payment."
      },
      "updateSubscription(address,uint64,uint256[])": {
        "notice": "Extends the subscription for the given `tokenIds` with a specified `duration`, using native currency as payment."
      },
      "updateSubscriptionForFree(address,uint64,uint256)": {
        "notice": "Extends the subscription for the given `tokenId` with a specified `duration` for free."
      },
      "updateSubscriptionForFree(address,uint64,uint256[])": {
        "notice": "Extends the subscription for the given `tokenIds` with a specified `duration` for free."
      },
      "withdraw(address,address)": {
        "notice": "Withdraws the native currency from the contract to the specified address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 831,
        "contract": "contracts/Subscription.sol:Subscription",
        "label": "pricePerSecond",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 445,
        "contract": "contracts/Subscription.sol:Subscription",
        "label": "_expirations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint64)"
      },
      {
        "astId": 448,
        "contract": "contracts/Subscription.sol:Subscription",
        "label": "minRenewalDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 451,
        "contract": "contracts/Subscription.sol:Subscription",
        "label": "maxRenewalDuration",
        "offset": 8,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 454,
        "contract": "contracts/Subscription.sol:Subscription",
        "label": "cre8orsNFT",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12,
        "contract": "contracts/Subscription.sol:Subscription",
        "label": "_renewable",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}